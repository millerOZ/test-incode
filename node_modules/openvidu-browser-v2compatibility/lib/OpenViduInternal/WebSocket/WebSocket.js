"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OvWebSocket = void 0;
const socket_io_client_1 = require("socket.io-client");
const OpenViduLogger_1 = require("../Logger/OpenViduLogger");
/**
 * @hidden
 */
const logger = OpenViduLogger_1.OpenViduLogger.getInstance();
/**
 * OvWebSocket class for managing a WebSocket connection.
 * @hidden
 */
class OvWebSocket {
    constructor(url, roomName, roomSid, connectionId, platform) {
        this.url = url;
        this.roomName = roomName;
        this.roomSid = roomSid;
        this.connectionId = connectionId;
        this.platform = platform;
        this.socket = null;
    }
    connect() {
        return new Promise((resolve, reject) => {
            const isSecureUrl = this.url.startsWith('https://') || this.url.startsWith('wss://');
            this.socket = (0, socket_io_client_1.io)(this.url, {
                path: '/openvidu/ws/',
                transports: ['websocket', 'polling'],
                query: {
                    roomName: this.roomName,
                    roomSid: this.roomSid,
                    connectionId: this.connectionId,
                    platform: this.platform
                },
                secure: isSecureUrl,
                rejectUnauthorized: isSecureUrl
            });
            this.socket.on('connect', () => {
                var _a;
                if ((_a = this.socket) === null || _a === void 0 ? void 0 : _a.recovered) {
                    logger.log('WebSocket reconnected');
                }
                else {
                    logger.debug('WebSocket connected');
                }
                resolve();
            });
            this.socket.on('disconnect', () => {
                logger.debug('WebSocket disconnected');
            });
            this.socket.on('connect_error', () => {
                // revert to classic upgrade
                if (this.socket)
                    this.socket.io.opts.transports = ['polling', 'websocket'];
            });
        });
    }
    /**
     * Close the WebSocket connection.
     */
    close() {
        if (this.socket) {
            this.socket.close();
        }
    }
    /**
     * Emit a WebSocket event.
     * @param event - The event name.
     * @param data - The data to send.
     */
    emitEvent(event, data) {
        var _a;
        if (!((_a = this.socket) === null || _a === void 0 ? void 0 : _a.connected)) {
            logger.error('WebSocket is not connected');
            return;
        }
        this.socket.emit(event, data);
    }
    /**
     * Set up a callback for a WebSocket event.
     * @param event - The event name.
     * @param callback - The callback function to execute when the event occurs.
     */
    onEvent(event, callback) {
        if (!this.socket) {
            logger.error('WebSocket is not connected');
            return;
        }
        this.socket.on(event, callback);
    }
    /*
     * Send a request to the server and wait for an answer
     */
    requestAnswer(method, params, callback) {
        if (!this.socket) {
            logger.error('WebSocket is not connected');
            return;
        }
        this.socket.timeout(5000).emit(method, params, callback);
    }
}
exports.OvWebSocket = OvWebSocket;
//# sourceMappingURL=WebSocket.js.map