"use strict";
/*
 * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamEvent = void 0;
const Event_1 = require("./Event");
const Publisher_1 = require("../../OpenVidu/Publisher");
const Session_1 = require("../../OpenVidu/Session");
const OpenViduLogger_1 = require("../Logger/OpenViduLogger");
/**
 * @hidden
 */
const logger = OpenViduLogger_1.OpenViduLogger.getInstance();
/**
 * Triggered by:
 * - `streamCreated` (available for [Session](/en/stable/api/openbidu-browser-v2compatibility/interfaces/SessionEventMap.html#streamCreated) and [Publisher](/en/stable/api/openbidu-browser-v2compatibility/interfaces/PublisherEventMap.html#streamCreated) objects)
 * - `streamDestroyed` (available for [Session](/en/stable/api/openbidu-browser-v2compatibility/interfaces/SessionEventMap.html#streamDestroyed) and [Publisher](/en/stable/api/openbidu-browser-v2compatibility/interfaces/PublisherEventMap.html#streamDestroyed) objects)
 */
class StreamEvent extends Event_1.Event {
    /**
     * @hidden
     */
    constructor(cancelable, target, type, stream, reason) {
        super(cancelable, target, type);
        this.stream = stream;
        this.reason = reason;
        if (this.type === 'streamDestroyed') {
            stream.streamJustDestroyed();
        }
    }
    /**
     * @hidden
     */
    callDefaultBehavior() {
        if (this.type === 'streamDestroyed') {
            if (this.target instanceof Session_1.Session) {
                // Remote Stream
                logger.info("Calling default behavior upon '" + this.type + "' event dispatched by 'Session'");
            }
            else if (this.target instanceof Publisher_1.Publisher) {
                // Local Stream
                logger.info("Calling default behavior upon '" + this.type + "' event dispatched by 'Publisher'");
                // Delete Publisher object from OpenVidu publishers array
                const openviduPublishers = this.target.openvidu.publishers;
                for (let i = 0; i < openviduPublishers.length; i++) {
                    if (openviduPublishers[i] === this.target) {
                        openviduPublishers.splice(i, 1);
                        break;
                    }
                }
            }
            // Remove from DOM all video elements associated to this Stream, if there's a StreamManager defined
            // (method Session.subscribe must have been called)
            if (this.stream.streamManager)
                this.stream.streamManager.removeAllVideos();
        }
    }
}
exports.StreamEvent = StreamEvent;
//# sourceMappingURL=StreamEvent.js.map