"use strict";
/*
 * (C) Copyright 2017-2022 OpenVidu (https://openvidu.io)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionDisconnectedEvent = void 0;
const Event_1 = require("./Event");
const OpenViduLogger_1 = require("../Logger/OpenViduLogger");
/**
 * @hidden
 */
const logger = OpenViduLogger_1.OpenViduLogger.getInstance();
/**
 * Triggered by {@link SessionEventMap.sessionDisconnected}
 */
class SessionDisconnectedEvent extends Event_1.Event {
    /**
     * @hidden
     */
    constructor(target, livekitReason) {
        super(true, target, 'sessionDisconnected');
        this.reason = this.fromLivekitReasonToOpenviduReason(livekitReason);
    }
    fromLivekitReasonToOpenviduReason(reason) {
        switch (reason) {
            case 1:
                return 'disconnect';
            case 2:
                return 'forceDisconnectByServer';
            case 3:
                return 'nodeCrashed';
            case 4:
                return 'forceDisconnectByServer';
            case 5:
                return 'sessionClosedByServer';
            default:
                return 'disconnect';
        }
    }
    /**
     * @hidden
     */
    callDefaultBehavior() {
        logger.info("Calling default behavior upon '" + this.type + "' event dispatched by 'Session'");
        const session = this.target;
        // Dispose and delete all remote Connections
        session.remoteConnections.forEach((remoteConnection) => {
            var _a, _b, _c;
            const connectionId = remoteConnection.connectionId;
            if (!!((_a = session.remoteConnections.get(connectionId)) === null || _a === void 0 ? void 0 : _a.stream)) {
                if ((_b = session.remoteConnections.get(connectionId)) === null || _b === void 0 ? void 0 : _b.stream.streamManager) {
                    (_c = session.remoteConnections.get(connectionId)) === null || _c === void 0 ? void 0 : _c.stream.streamManager.removeAllVideos();
                }
            }
            session.remoteConnections.delete(connectionId);
        });
    }
}
exports.SessionDisconnectedEvent = SessionDisconnectedEvent;
//# sourceMappingURL=SessionDisconnectedEvent.js.map