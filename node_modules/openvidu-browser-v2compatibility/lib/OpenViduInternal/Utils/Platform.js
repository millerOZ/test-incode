"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlatformUtils = void 0;
const platform = require("platform");
class PlatformUtils {
    constructor() { }
    static getInstance() {
        if (!this.instance) {
            this.instance = new PlatformUtils();
        }
        return PlatformUtils.instance;
    }
    isChromeBrowser() {
        return platform.name === 'Chrome';
    }
    /**
     * @hidden
     */
    isSafariBrowser() {
        return platform.name === 'Safari';
    }
    /**
     * @hidden
     */
    isChromeMobileBrowser() {
        return platform.name === 'Chrome Mobile';
    }
    /**
     * @hidden
     */
    isFirefoxBrowser() {
        return platform.name === 'Firefox';
    }
    /**
     * @hidden
     */
    isFirefoxMobileBrowser() {
        return platform.name === 'Firefox Mobile' || platform.name === 'Firefox for iOS';
    }
    /**
     * @hidden
     */
    isOperaBrowser() {
        return platform.name === 'Opera';
    }
    /**
     * @hidden
     */
    isOperaMobileBrowser() {
        return platform.name === 'Opera Mobile';
    }
    /**
     * @hidden
     */
    isEdgeBrowser() {
        const version = (platform === null || platform === void 0 ? void 0 : platform.version) ? parseFloat(platform.version) : -1;
        return platform.name === 'Microsoft Edge' && version >= 80;
    }
    /**
     * @hidden
     */
    isEdgeMobileBrowser() {
        var _a, _b;
        const version = (platform === null || platform === void 0 ? void 0 : platform.version) ? parseFloat(platform.version) : -1;
        return platform.name === 'Microsoft Edge' && (((_a = platform.os) === null || _a === void 0 ? void 0 : _a.family) === 'Android' || ((_b = platform.os) === null || _b === void 0 ? void 0 : _b.family) === 'iOS') && version > 45;
    }
    /**
     * @hidden
     */
    isAndroidBrowser() {
        return platform.name === 'Android Browser';
    }
    /**
     * @hidden
     */
    isElectron() {
        return platform.name === 'Electron';
    }
    /**
     * @hidden
     */
    isNodeJs() {
        return platform.name === 'Node.js';
    }
    /**
     * @hidden
     */
    isSamsungBrowser() {
        return platform.name === 'Samsung Internet Mobile' || platform.name === 'Samsung Internet';
    }
    // TODO: This method exists to overcome bug https://github.com/bestiejs/platform.js/issues/184
    /**
     * @hidden
     */
    isMotorolaEdgeDevice() {
        var _a;
        return ((_a = platform.product) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes('motorola edge')) || false;
    }
    /**
     * @hidden
     */
    isIPhoneOrIPad() {
        const userAgent = !!platform.ua ? platform.ua : navigator.userAgent;
        const isTouchable = 'ontouchend' in document;
        const isIPad = /\b(\w*Macintosh\w*)\b/.test(userAgent) && isTouchable;
        const isIPhone = /\b(\w*iPhone\w*)\b/.test(userAgent) && /\b(\w*Mobile\w*)\b/.test(userAgent) && isTouchable;
        return isIPad || isIPhone;
    }
    /**
     * @hidden
     */
    isIOSWithSafari() {
        const userAgent = !!platform.ua ? platform.ua : navigator.userAgent;
        return (this.isIPhoneOrIPad() &&
            /\b(\w*Apple\w*)\b/.test(navigator.vendor) &&
            /\b(\w*Safari\w*)\b/.test(userAgent) &&
            !/\b(\w*CriOS\w*)\b/.test(userAgent) &&
            !/\b(\w*FxiOS\w*)\b/.test(userAgent));
    }
    /**
     * @hidden
     */
    isIonicIos() {
        return this.isIPhoneOrIPad() && platform.ua.indexOf('Safari') === -1;
    }
    /**
     * @hidden
     */
    isIonicAndroid() {
        return platform.os.family === 'Android' && platform.name == 'Android Browser';
    }
    /**
     * @hidden
     */
    isMobileDevice() {
        return platform.os.family === 'iOS' || platform.os.family === 'Android';
    }
    /**
     * @hidden
     */
    isReactNative() {
        return false;
    }
    /**
     * @hidden
     */
    isChromium() {
        return (this.isChromeBrowser() ||
            this.isChromeMobileBrowser() ||
            this.isOperaBrowser() ||
            this.isOperaMobileBrowser() ||
            this.isEdgeBrowser() ||
            this.isEdgeMobileBrowser() ||
            this.isSamsungBrowser() ||
            this.isIonicAndroid() ||
            this.isIonicIos() ||
            this.isElectron() ||
            // TODO: remove when possible
            this.isMotorolaEdgeDevice());
    }
    /**
     * @hidden
     */
    canScreenShare() {
        const version = (platform === null || platform === void 0 ? void 0 : platform.version) ? parseFloat(platform.version) : -1;
        // Reject mobile devices
        if (this.isMobileDevice()) {
            return false;
        }
        return (this.isChromeBrowser() ||
            this.isFirefoxBrowser() ||
            this.isOperaBrowser() ||
            this.isElectron() ||
            this.isEdgeBrowser() ||
            (this.isSafariBrowser() && version >= 13));
    }
    /**
     * @hidden
     */
    getName() {
        return platform.name || '';
    }
    /**
     * @hidden
     */
    getVersion() {
        return platform.version || '';
    }
    /**
     * @hidden
     */
    getFamily() {
        return platform.os.family || '';
    }
    /**
     * @hidden
     */
    getDescription() {
        return platform.description || '';
    }
}
exports.PlatformUtils = PlatformUtils;
//# sourceMappingURL=Platform.js.map