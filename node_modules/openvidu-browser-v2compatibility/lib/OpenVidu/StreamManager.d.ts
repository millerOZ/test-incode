import { StreamManagerVideo } from '../OpenViduInternal/Interfaces/Public/StreamManagerVideo';
import { EventDispatcher } from './EventDispatcher';
import { Stream } from './Stream';
import { StreamManagerEventMap } from '../OpenViduInternal/Events/EventMap/StreamManagerEventMap';
import { Subscription } from 'rxjs';
import { VideoInsertMode } from '../OpenViduInternal/Enums/VideoInsertMode';
export declare abstract class StreamManager extends EventDispatcher {
    /**
     * The Stream represented in the DOM by the Publisher/Subscriber
     */
    stream: Stream;
    /**
     * Whether the Stream represented in the DOM is local or remote
     * - `false` for {@link Publisher}
     * - `true` for {@link Subscriber}
     */
    remote: boolean;
    /**
     * The DOM HTMLElement assigned as target element when creating the video for the Publisher/Subscriber. This property is only defined if:
     * - {@link Publisher} has been initialized by calling method {@link OpenVidu.initPublisher} with a valid `targetElement` parameter
     * - {@link Subscriber} has been initialized by calling method {@link Session.subscribe} with a valid `targetElement` parameter
     */
    targetElement: HTMLElement | string | undefined;
    /**
     * All the videos displaying the Stream of this Publisher/Subscriber
     */
    videos: StreamManagerVideo[];
    /**
     * `id` attribute of the DOM video element displaying the Publisher/Subscriber's stream. This property is only defined if:
     * - {@link Publisher} has been initialized by calling method {@link OpenVidu.initPublisher} with a valid `targetElement` parameter
     * - {@link Subscriber} has been initialized by calling method {@link Session.subscribe} with a valid `targetElement` parameter
     */
    id: string;
    /**
     * @hidden
     */
    lazyLaunchVideoElementCreatedEvent: boolean;
    /**
     * @hidden
     */
    private canPlayListener;
    /**
     * @hidden
     */
    private streamPlayingEventExceptionTimeout?;
    protected internalSubs: Map<string, Subscription>;
    /**
     * @hidden
     */
    constructor(stream: Stream, targetElement?: HTMLElement | string);
    /**
     * @hidden
     */
    setupReadyToAttachListener(): void;
    /**
     * Makes `video` element parameter display this {@link stream}. This is useful when you are
     * [managing the video elements on your own](/en/stable/cheatsheet/manage-videos/#you-take-care-of-the-video-players)
     *
     * Calling this method with a video already added to other Publisher/Subscriber will cause the video element to be
     * disassociated from that previous Publisher/Subscriber and to be associated to this one.
     *
     * @returns 1 if the video wasn't associated to any other Publisher/Subscriber and has been successfully added to this one.
     * 0 if the video was already added to this Publisher/Subscriber. -1 if the video was previously associated to any other
     * Publisher/Subscriber and has been successfully disassociated from that one and properly added to this one.
     */
    addVideoElement(video: HTMLVideoElement): number;
    /**
     * @hidden
     */
    disassociateVideo(video: HTMLVideoElement): boolean;
    /**
     * @hidden
     */
    addPlayEventToFirstVideo(): void;
    /**
     * Creates a new video element displaying this {@link stream}. This allows you to have multiple video elements displaying the same media stream.
     *
     * #### Events dispatched
     *
     * The Publisher/Subscriber object will dispatch a `videoElementCreated` event once the HTML video element has been added to DOM. See {@link VideoElementEvent}
     *
     * @param targetElement HTML DOM element (or its `id` attribute) in which the video element of the Publisher/Subscriber will be inserted
     * @param insertMode How the video element will be inserted accordingly to `targetElemet`
     *
     * @returns The created HTMLVideoElement
     */
    createVideoElement(targetElement: string | HTMLElement, insertMode?: VideoInsertMode): HTMLVideoElement;
    /**
     * Updates the current configuration for the {@link PublisherSpeakingEvent} feature and the [StreamManagerEvent.streamAudioVolumeChange](/en/stable/api/openvidu-browser-v2compatibility/classes/StreamManagerEvent.html) feature for this specific
     * StreamManager audio stream, overriding the global options set with {@link OpenVidu.setAdvancedConfiguration}. This way you can customize the audio events options
     * for each specific StreamManager and change them dynamically.
     *
     * @param publisherSpeakingEventsOptions New options to be applied to this StreamManager's audio stream. It is an object which includes the following optional properties:
     * - `interval`: (number) how frequently the analyser polls the audio stream to check if speaking has started/stopped or audio volume has changed. Default **100** (ms)
     * - `threshold`: (number) the volume at which _publisherStartSpeaking_, _publisherStopSpeaking_ events will be fired. Default **-50** (dB)
     */
    updatePublisherSpeakingEventsOptions(publisherSpeakingEventsOptions: {
        interval?: number;
        threshold?: number;
    }): void;
    /**
     * @hidden
     */
    anySpeechEventListenerEnabled(event: string, onlyOnce: boolean): boolean;
    protected pushNewStreamManagerVideo(streamManagerVideo: StreamManagerVideo): void;
    /**
     * @hidden
     */
    private initializeVideoProperties;
    private initializeVideoPropertiesAux;
    private attachTracks;
    private setMirror;
    private isMirrored;
    /**
     * @hidden
     */
    emitEvent(type: string, eventArray: any[]): void;
    /**
     * See {@link EventDispatcher.on}
     */
    on<K extends keyof StreamManagerEventMap>(type: K, handler: (event: StreamManagerEventMap[K]) => void): this;
    /**
     * See {@link EventDispatcher.on}
     */
    once<K extends keyof StreamManagerEventMap>(type: K, handler: (event: StreamManagerEventMap[K]) => void): this;
    /**
     * See {@link EventDispatcher.off}
     */
    off<K extends keyof StreamManagerEventMap>(type: K, handler?: (event: StreamManagerEventMap[K]) => void): this;
    removeAllVideos(): void;
    private activateStreamPlayingEventExceptionTimeout;
    private deactivateStreamPlayingEventExceptionTimeout;
}
