import { AudioCaptureOptions, ScreenShareCaptureOptions, VideoCaptureOptions } from 'livekit-client';
import { Device } from '../OpenViduInternal/Interfaces/Public/Device';
import { PublisherProperties } from '../OpenViduInternal/Interfaces/Public/PublisherProperties';
import { Publisher } from './Publisher';
import { Session } from './Session';
import { CustomMediaStreamConstraints } from '../OpenViduInternal/Interfaces/Private/CustomMediaStreamConstraints';
import { OpenViduAdvancedConfiguration } from '../OpenViduInternal/Interfaces/Public/OpenViduAdvancedConfiguration';
import { Stream } from './Stream';
import { LocalRecorder } from './LocalRecorder';
import { StreamPropertyChangedEventReason } from '../OpenViduInternal/Events/Types/Types';
/**
 * Entrypoint of OpenVidu Browser library.
 * Use it to initialize objects of type {@link Session}, {@link Publisher} and {@link LocalRecorder}
 */
export declare class OpenVidu {
    /**
     * @hidden
     */
    libraryVersion: string;
    /**
     * @hidden
     */
    session: Session;
    /**
     * @hidden
     */
    publishers: Publisher[];
    /**
     * ! Not supported in Adapter
     * @hidden
     */
    advancedConfiguration: OpenViduAdvancedConfiguration;
    /**
     * @hidden
     */
    role: string;
    /**
     * @hidden
     */
    finalUserId: string;
    constructor();
    /**
     * Returns new session
     */
    initSession(): Session;
    initPublisher(targetElement: string | HTMLElement | undefined): Publisher;
    initPublisher(targetElement: string | HTMLElement | undefined, properties: PublisherProperties): Publisher;
    initPublisher(targetElement: string | HTMLElement | undefined, completionHandler: (error: Error | undefined) => void): Publisher;
    initPublisher(targetElement: string | HTMLElement | undefined, properties: PublisherProperties, completionHandler: (error: Error | undefined) => void): Publisher;
    /**
     * Promisified version of {@link OpenVidu.initPublisher}
     *
     * > WARNING: events `accessDialogOpened` and `accessDialogClosed` will not be dispatched if using this method instead of {@link OpenVidu.initPublisher}
     */
    initPublisherAsync(targetElement: string | HTMLElement | undefined): Promise<Publisher>;
    initPublisherAsync(targetElement: string | HTMLElement | undefined, properties: PublisherProperties): Promise<Publisher>;
    /**
     * Collects information about the media input devices available on the system. You can pass property `deviceId` of a {@link Device} object as value of `audioSource` or `videoSource` properties in {@link initPublisher} method
     */
    getDevices(): Promise<Device[]>;
    /**
     * Get a MediaStream object that you can customize before calling {@link initPublisher} (pass _MediaStreamTrack_ property of the _MediaStream_ value resolved by the Promise as `audioSource` or `videoSource` properties in {@link initPublisher})
     *
     * Parameter `options` is the same as in {@link initPublisher} second parameter (of type {@link PublisherProperties}), but only the following properties will be applied: `audioSource`, `videoSource`, `frameRate`, `resolution`
     *
     * To customize the Publisher's video, the API for HTMLCanvasElement is very useful. For example, to get a black-and-white video at 10 fps and HD resolution with no sound:
     * ```
     * var OV = new OpenVidu();
     * var FRAME_RATE = 10;
     *
     * OV.getUserMedia({
     *    audioSource: false,
     *    videoSource: undefined,
     *    resolution: '1280x720',
     *    frameRate: FRAME_RATE
     * })
     * .then(mediaStream => {
     *
     *    var videoTrack = mediaStream.getVideoTracks()[0];
     *    var video = document.createElement('video');
     *    video.srcObject = new MediaStream([videoTrack]);
     *
     *    var canvas = document.createElement('canvas');
     *    var ctx = canvas.getContext('2d');
     *    ctx.filter = 'grayscale(100%)';
     *
     *    video.addEventListener('play', () => {
     *      var loop = () => {
     *        if (!video.paused && !video.ended) {
     *          ctx.drawImage(video, 0, 0, 300, 170);
     *          setTimeout(loop, 1000/ FRAME_RATE); // Drawing at 10 fps
     *        }
     *      };
     *      loop();
     *    });
     *    video.play();
     *
     *    var grayVideoTrack = canvas.captureStream(FRAME_RATE).getVideoTracks()[0];
     *    var publisher = this.OV.initPublisher(
     *      myHtmlTarget,
     *      {
     *        audioSource: false,
     *        videoSource: grayVideoTrack
     *      });
     * });
     * ```
     */
    getUserMedia(properties: PublisherProperties): Promise<MediaStream>;
    /**
     * Disable all logging except error level
     */
    enableProdMode(): void;
    /**
     * @hidden
     */
    onOrientationChanged(handler: any): void;
    /**
     * @hidden
     */
    sendNewVideoDimensionsIfRequired(publisher: Publisher, reason: StreamPropertyChangedEventReason, WAIT_INTERVAL: number, MAX_ATTEMPTS: number): void;
    /**
     * @hidden
     */
    sendVideoDimensionsChangedEvent(publisher: Publisher, reason: StreamPropertyChangedEventReason, oldWidth: number, oldHeight: number, newWidth: number, newHeight: number): Promise<void>;
    /**
     * @hidden
     */
    generateNewMediaStream(audioTrack?: MediaStreamTrack, videoTrack?: MediaStreamTrack): MediaStream;
    /**
     * Generates the media constraints based on the provided publisher properties.
     * @param publisherProperties - The properties of the publisher.
     * @returns A promise that resolves to the custom media stream constraints.
     * @throws {OpenViduError} If the audioSource and videoSource are both set to false or null.
     * @hidden
     */
    generateMediaConstraints(publisherProperties: PublisherProperties): CustomMediaStreamConstraints;
    /**
     * Set OpenVidu advanced configuration options. `configuration` is an object of type {@link OpenViduAdvancedConfiguration}. Call this method to override previous values at any moment.
     */
    setAdvancedConfiguration(configuration: OpenViduAdvancedConfiguration): void;
    /**
     * Returns a new local recorder for recording streams straight away from the browser
     * @param stream  Stream to record
     */
    initLocalRecorder(stream: Stream): LocalRecorder;
    /**
     * Checks if the browser supports screen-sharing. Desktop Chrome, Firefox and Opera support screen-sharing
     * @returns 1 if the browser supports screen-sharing, 0 otherwise
     */
    checkScreenSharingCapabilities(): boolean;
    /**
     * @hidden
     */
    private configureDeviceIdOrScreensharing;
    private isScreenShare;
    private initializeProperties;
    private getInsertMode;
    /**
     * Checks if media tracks are provided based on the given constraints.
     * @param constraints - The custom media stream constraints.
     * @returns A boolean indicating whether media tracks are provided or not.
     * @hidden
     */
    isMediaTracksProvided(constraints: CustomMediaStreamConstraints): boolean;
    /**
     *
     * @hidden
     */
    generateVideoCaptureOptionsFromContraints(constraints: MediaStreamConstraints): VideoCaptureOptions | boolean;
    /**
     *
     * @hidden
     */
    generateAudioCaptureOptionsFromContraints(constraints: MediaStreamConstraints): AudioCaptureOptions | boolean;
    /**
     * @hidden
     */
    generateScreenCaptureOptionsFromConstraints(constraints: MediaStreamConstraints): ScreenShareCaptureOptions;
    /**
     *
     * @hidden
     */
    private getResolution;
}
