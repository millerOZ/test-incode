import React from 'react';
import type { ReactElement } from 'react';
import { emptyFunc } from './utils';
type React18Root = {
    render: (children: ReactElement) => void;
    unmount: () => void;
};
type React17RenderFunction = (element: ReactElement, container: Element | null) => void;
type RootOrRenderFunction = React18Root | React17RenderFunction;
export declare const useEventListener: (eventName: string, handler: (...params: unknown[]) => unknown, element?: Window | Document) => void;
export declare const createPersistedState: (key: string, provider?: Storage | null) => (initialState: unknown) => any[];
export declare function getLocalStorageValue(key: string): any;
export declare function usePersistentState(key: string, defaultValue: unknown): any[];
export declare function useLogin(key?: string): any;
export declare const useSessionState: (initialState: unknown) => any[];
export declare function usePermissions(): readonly [boolean, React.Dispatch<React.SetStateAction<boolean>>, boolean];
export declare function useInterval(callback: () => unknown, delay: number): number;
export declare function useTimeout(callback: () => unknown, delay: number): void;
export declare const useResize: (isKiosk?: boolean) => void;
export declare const isPortrait: () => boolean;
export declare function useOrientation(): {
    isRotated: boolean;
};
export declare const handleUnmountRoot: (cb: (...args: unknown[]) => unknown, root: RootOrRenderFunction, element: Element | null) => (...props: unknown[]) => void;
export declare const createRoot: (element: Element | null) => RootOrRenderFunction;
export declare const customRender: (component: ReactElement, element: Element | null, root: RootOrRenderFunction) => void;
export declare function useQuery(): URLSearchParams;
export declare function useSteps(initialState?: number | (() => number)): {
    currentStep: number;
    setStep: React.Dispatch<React.SetStateAction<number>>;
    nextStep: () => void;
};
export declare function useOffline(cb?: typeof emptyFunc): void;
export declare function useToggle(initialState?: boolean): {
    state: boolean;
    actions: {
        on: () => void;
        off: () => void;
        toggle: () => void;
        reset: () => void;
    };
};
export declare function useClickOutside(elementRef: React.MutableRefObject<HTMLHtmlElement | null>, cb: () => void): void;
export declare function useScript(src: string, onLoad: () => void): void;
export declare const useUpdateQueryParamsAndReload: () => (params: any) => void;
export declare const useDocumentTitle: (title: any) => void;
export declare const useAutoFocus: (ref: any, shouldBlur?: boolean) => void;
export declare function useDeviceId(): readonly [string, (deviceId: string | null) => void];
export declare function useDebouncedValue(value: any, delay?: number): any;
export {};
