type FacingMode = 'user' | 'environment';
export declare const killStream: (mediaStream: MediaStream, onlyVideo?: boolean) => void;
export declare const selfieChecks: ({ confidence, isBright, hasLenses, hasFaceMask, hasClosedEyes, hasHeadCover, }: {
    confidence: any;
    isBright: any;
    hasLenses: any;
    hasFaceMask: any;
    hasClosedEyes: any;
    hasHeadCover: any;
}, { hatCheckEnabled, lensesCheckEnabled, maskCheckEnabled, eyesClosedCheckEnabled, }: {
    hatCheckEnabled?: boolean;
    lensesCheckEnabled?: boolean;
    maskCheckEnabled?: boolean;
    eyesClosedCheckEnabled?: boolean;
}) => {
    livenessPassed: boolean;
    brightnessPassed: any;
    lensesPassed: boolean;
    maskPassed: boolean;
    closedEyesPassed: boolean;
    headCoverPassed: boolean;
    hasErrors: boolean;
};
export declare const logSelfieChecks: (response: any, checks: any, onLog: any, setNotificationMessage: any, t: any, setNotificationDescription: any, assistedOnboarding: any) => void;
export declare const getStream: (facingMode: FacingMode, resolutionFallbackLevel?: number) => Promise<MediaStream>;
export declare const getIOSConstraints: () => {
    audio: boolean;
    video: {
        resizeMode: string;
        facingMode: string;
        height: {
            ideal: number;
        };
        aspectRatio: {
            ideal: number;
        };
    };
};
export declare const getAndroidConstraints: () => {
    audio: boolean;
    video: {
        resizeMode: string;
        facingMode: string;
        height: {
            ideal: number;
        };
        aspectRatio: {
            ideal: number;
        };
    };
};
export declare const getImageBase64FromVideo: (video: HTMLVideoElement) => string;
export declare function getNonUltraWideFrontCameraStream(): Promise<MediaStream>;
export declare const getMediaStreamFromResolution: (width: number, height: number) => Promise<MediaStream>;
export declare const getImageDataFromStream: (stream: MediaStream) => Promise<ImageData>;
export declare const zoomCameraToTheMax: (stream: MediaStream) => Promise<boolean>;
export declare const zoomCameraToTheMin: (stream: MediaStream) => Promise<boolean>;
export declare const zoomCamera: (videoTrack: MediaStreamTrack, zoom: number) => Promise<boolean>;
export declare function base64ToImageData(base64: string): Promise<ImageData>;
export interface ChosenCameraInfo {
    label: string;
    deviceId: string;
    fallbackOption: number | null;
    videoSource: string | null;
    resolution: string;
    autofocus: boolean;
    facingMode: string;
    currentFrameRate: number;
    zoom?: {
        current: string;
        min: string;
        max: string;
        step: string;
    };
    focusDistance?: {
        current: string;
        min: string;
        max: string;
        step: string;
    };
}
/**
 * Fetches and returns an object with capabilities and settings for the chosen camera.
 * This method can provide more detailed information than getDeviceCapabilities() because it uses a track object instead of MediaDeviceInfo.
 * @param {MediaStreamTrack} videoTrack - The video track to get information from.
 * @param {Number} fallbackOption - The fallback option for the camera.
 * @param {string} videoSource - The video source of the camera.
 * @returns {ChosenCameraInfo} An object of camera capabilities and settings.
 */
export declare function getChosenCameraInfo(videoTrack: MediaStreamTrack, fallbackOption?: number | null, videoSource?: string | null): ChosenCameraInfo;
export interface CameraInfo {
    label: string;
    width: {
        min: number;
        max: number;
    };
    height: {
        min: number;
        max: number;
    };
    frameRate: {
        min: number;
        max: number;
    };
    facingMode: string;
    focusMode?: string;
    focusDistance?: {
        min: number;
        max: number;
    };
}
/**
 * Asynchronously fetches and returns an object of capabilities for all video input devices (cameras).
 * This method does not require any permissions or creation of tracks, but it provides limited information.
 * @returns {Promise<{ [key: string]: CameraInfo }>} A promise that resolves to an object of camera capabilities.
 */
export declare function getDeviceCapabilities(): Promise<{
    [key: string]: CameraInfo;
}>;
export declare function createVideoElement(): HTMLVideoElement;
export declare function removeVideoElement(video: any): void;
type TranslationMap = {
    [key: string]: {
        default: string;
        assisted: string;
    };
};
export declare const getSelfieTranslation: (key: keyof TranslationMap, assistedOnboarding: boolean) => string;
export declare const getSupportedMediaRecorderMimeType: () => string;
export {};
