import { IncodeCanvas } from '../camera/IncodeCanvas';
import { PipelineProfile } from '../wasmUtils/pipelineProfile';
export type FaceCoordinates = {
    rightEyeX: number;
    rightEyeY: number;
    leftEyeX: number;
    leftEyeY: number;
    noseTipX: number;
    noseTipY: number;
    rightMouthX: number;
    rightMouthY: number;
    mouthX: number;
    mouthY: number;
    x: number;
    y: number;
    width: number;
    height: number;
};
export declare class FaceDetection {
    private pipelineProfile;
    private bestCanvas;
    private bestLandmarks;
    private bestTopLeft;
    private bestSize;
    private currCanvas;
    private formatLandmarks;
    initialize(props: {
        onNoFace: () => void;
        onCaptureFace: () => void;
        onTooManyFaces: () => void;
        onTooClose: () => void;
        onCenterFace: () => void;
        onFarAway: () => void;
        onGetReady: () => void;
        onGetReadyFinished: () => void;
        onBlur: () => void;
        onDark: () => void;
        onFaceAngle: () => void;
        onHeadWear: () => void;
        onLenses: () => void;
        onEyesClosed: () => void;
        onFaceMask: () => void;
        onSwitchToManualCapture: () => void;
        onCapture: (canvas: IncodeCanvas, faceCoordinates: FaceCoordinates) => any;
        isLensesCheckEnabled: boolean;
        isMaskCheckEnabled: boolean;
        isClosedEyesCheckEnabled: boolean;
        isHeadWearCheckEnabled: boolean;
        isVideoSelfie: boolean;
        pipelineProfile: PipelineProfile;
        autocaptureTimeout: number;
    }): Promise<void>;
    detect(canvas: IncodeCanvas): Promise<void>;
}
