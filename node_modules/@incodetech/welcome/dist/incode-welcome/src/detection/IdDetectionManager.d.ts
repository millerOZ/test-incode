import EventEmitter from 'eventemitter3';
import { IncodeCanvas } from '../camera/IncodeCanvas';
import { PipelineProfile } from '../wasmUtils/pipelineProfile';
import { IdCapture } from './detectID';
export type OnCapture = (canvas: IncodeCanvas, options?: {
    qualityElements?: {
        glare: number;
        sharpness: number;
    };
    isManualCapture: boolean;
}) => void;
export type GetCanvas = () => IncodeCanvas | undefined;
export type DetectionState = 'detecting' | 'capturing' | 'farAway' | 'glare' | 'blur' | 'idNotDetected' | 'manualCapture';
type BadDetectionState = 'farAway' | 'glare' | 'blur';
export type IdSide = 'front' | 'back' | 'unknown' | null;
export type DetectionIdType = 'FrontId' | 'BackId' | 'Passport';
export type DetectionOrientation = 'horizontal' | 'vertical';
export type IDType = 'id' | 'passport' | null;
export type IdDetectionSnapshot = {
    detectionState: DetectionState;
    idType: IDType;
    idSide: IdSide;
    orientation: DetectionOrientation;
};
type IdDetectionManagerProps = {
    getCanvas: GetCanvas;
    onCapture: OnCapture;
    detectionIdType: DetectionIdType;
    timeout?: number;
};
export declare class IdDetectionManager extends EventEmitter<{
    stateChange: (snapshot: IdDetectionSnapshot) => void;
}> {
    pipeline: IdCapture | null;
    pipelineProfile: PipelineProfile | null;
    detectionState: DetectionState;
    idType: IDType;
    idSide: IdSide;
    orientation: DetectionOrientation;
    isDetecting: boolean;
    isProcessingLocked: boolean;
    detectionTimeout: ReturnType<typeof setTimeout> | null;
    getCanvas: GetCanvas;
    onCapture: OnCapture;
    detectionIdType: DetectionIdType;
    timeout: number;
    constructor({ getCanvas, onCapture, detectionIdType, timeout, }: IdDetectionManagerProps);
    startDetection(): void;
    stopDetection(): void;
    processFrame: () => Promise<void>;
    initializePipeline(): Promise<void>;
    handleOnCapturing: () => void;
    handleOnCapture: (canvas: IncodeCanvas, qualityElements: {
        glare: number;
        sharpness: number;
    }) => void;
    setStateWithDelay(newState: BadDetectionState): void;
    switchToManualCapture: () => void;
    setDetectionState(newState: DetectionState): void;
    setIdType(newType: IDType): void;
    setIdSide(newSide: IdSide): void;
    setOrientation(newOrientation: DetectionOrientation): void;
    manualCapture: () => void;
    emitState(): void;
}
export {};
