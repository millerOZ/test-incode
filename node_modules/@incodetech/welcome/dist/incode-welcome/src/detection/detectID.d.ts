import { IncodeCanvas } from '../camera/IncodeCanvas';
import { PipelineProfile } from '../wasmUtils/pipelineProfile';
import { WasmPipelineType } from '../wasmUtils/wasmPipelineType';
declare abstract class IdDetectorBase {
    protected pipelineProfile: PipelineProfile | null;
    protected currentCanvas: IncodeCanvas | null;
    abstract getOnCapturing(onCapturing: any): any;
    abstract getOnCapture(onCapture: any): any;
    abstract getOnBestFrame(): any;
    abstract detect(canvas: IncodeCanvas): Promise<void>;
    initialize({ onCapturing, onFarAway, onGlare, onBlur, onIDNotDetected, onMaskChange, onDetectionStarted, onSwitchToManualCapture, onIDTypeChange, onIDSideChange, idType, isFixedMask, isBlurCheckEnabled, isGlareCheckEnabled, pipelineProfile, onCapture, idDetectedTimeout, autocaptureTimeout, }: {
        onCapturing: any;
        onCapture: any;
        onFarAway: any;
        onGlare: any;
        onBlur: any;
        onIDNotDetected: any;
        onMaskChange: any;
        onDetectionStarted: any;
        onSwitchToManualCapture: any;
        onIDTypeChange: any;
        onIDSideChange: any;
        idType: any;
        isFixedMask: boolean;
        isBlurCheckEnabled: boolean;
        isGlareCheckEnabled: boolean;
        pipelineProfile: PipelineProfile;
        idDetectedTimeout: number;
        autocaptureTimeout: number;
    }): Promise<void>;
    protected detectCommon(canvas: IncodeCanvas, pipelineType: WasmPipelineType): Promise<void>;
}
export declare class IdCapture extends IdDetectorBase {
    private bestCanvas;
    private qualityElements;
    getOnBestFrame(): any;
    getOnCapture(onCapture: any): any;
    getOnCapturing(onCapturing: any): any;
    detect(canvas: IncodeCanvas): Promise<void>;
}
export declare class IdVideoSelfie extends IdDetectorBase {
    private currentMode;
    getOnCapturing(onCapturing: any): any;
    getOnCapture(_onCapture: any): any;
    getOnBestFrame(): any;
    detect(canvas: IncodeCanvas): Promise<void>;
    updateCurrentMode(mode: string): void;
}
export {};
