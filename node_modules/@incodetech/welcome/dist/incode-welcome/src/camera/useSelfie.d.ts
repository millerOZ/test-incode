import { RefObject } from 'react';
import type { FaceCoordinates } from '../detection/detectFace';
import { IncodeCanvas } from './IncodeCanvas';
import { WebcamRef } from './Webcam.types';
type UseSelfieProps = {
    timeout?: number;
    isDetecting: {
        current: boolean;
    };
    onLog?: (log: any) => void;
    handleCapture: (canvas: IncodeCanvas, faceCoordinates: FaceCoordinates) => void;
    handleStopRecordingLocally?: () => void;
    numberOfTries?: number;
    handleNoAttempsLeft?: (options: {
        response: any;
        livenessPassed: boolean;
        imageBase64: string;
    }) => void;
    webcam: RefObject<WebcamRef>;
    onSwitchManualCapture?: () => void;
    onManualCaptureSelfie?: () => void;
    token?: string;
    assistedOnboarding: boolean;
    notificationTimeout?: number;
    disableZoomCheck?: boolean;
    hatCheckEnabled?: boolean;
    lensesCheckEnabled?: boolean;
    maskCheckEnabled?: boolean;
    eyesClosedCheckEnabled?: boolean;
};
declare function useSelfie({ timeout, onLog, handleCapture, numberOfTries, handleNoAttempsLeft, webcam, token, isDetecting, onSwitchManualCapture, onManualCaptureSelfie, assistedOnboarding, notificationTimeout, hatCheckEnabled, lensesCheckEnabled, maskCheckEnabled, eyesClosedCheckEnabled, disableZoomCheck, handleStopRecordingLocally, }: UseSelfieProps): {
    notificationMessage: any;
    notificationDescription: string;
    mode: string;
    capturing: import("react").MutableRefObject<boolean>;
    cameraReady: boolean;
    showManualCapture: boolean;
    handleFaceAutoCapture: (canvas: IncodeCanvas, faceCoordinates: FaceCoordinates) => Promise<void>;
    setMode: import("react").Dispatch<import("react").SetStateAction<string>>;
    resetLoading: ({ response, livenessPassed, imageBase64 }: {
        response: any;
        livenessPassed: any;
        imageBase64: any;
    }) => Promise<void>;
    setNotificationMessage: import("react").Dispatch<any>;
    setNotificationDescription: import("react").Dispatch<import("react").SetStateAction<string>>;
    handleError: (error: any) => void;
    autoDetectFace: () => void;
    startAutoDetect: () => Promise<void>;
    handleManualCapture: () => void;
    isCapturing: boolean;
    isUploading: boolean;
    isSuccess: boolean;
    isError: boolean;
    isLoading: boolean;
    hideCamera: boolean;
    showBorders: boolean;
    shouldShowManualCapture: boolean;
    selfieTimeoutRef: import("react").MutableRefObject<number>;
};
export default useSelfie;
