/**
 * Class representing a canvas element.
 */
export declare class IncodeCanvas {
    canvas: HTMLCanvasElement;
    private base64Image;
    private blobData;
    /**
     * Create a new canvas element.
     * @param {HTMLCanvasElement} canvas_ - The canvas element to clone.
     */
    constructor(canvas_: HTMLCanvasElement);
    /**
     * Check if the current canvas is valid.
     * @return {boolean} True if the canvas is valid, false otherwise.
     */
    private checkCanvas;
    /**
     * Release the data, stored by IncodeCanvas.
     */
    release(): void;
    /**
     * Get the width of the canvas.
     * @return {number | null} The width of the canvas or null if current canvas is incorrect.
     */
    width(): number | null;
    /**
     * Get the height of the canvas.
     * @return {number | null} The height of the canvas or null if current canvas is incorrect.
     */
    height(): number | null;
    /**
     * Set the width of the canvas.
     * @param {number} width - The new width of the canvas.
     */
    setWidth(width: number): void;
    /**
     * Set the height of the canvas.
     * @param {number} height - The new height of the canvas.
     */
    setHeight(height: number): void;
    /**
     * Clone the current canvas.
     * This method doesn't clone blob data and hense it is synchronous.
     * @return {IncodeCanvas | null} A new IncodeCanvas object with the same canvas as the current one or null if current canvas is not valid.
     */
    clone(): IncodeCanvas | null;
    /**
     * Deep clone the current IncodeCanvas.
     * This method clones the canvas element and also the base64Image and blobData properties.
     * It is asynchronous because it uses the setBlobData method which is asynchronous.
     * @return {Promise<IncodeCanvas | null>} A Promise that resolves to a new IncodeCanvas object with the same properties as the current one,
     * or null if current canvas is not valid.
     */
    deepClone(): Promise<IncodeCanvas | null>;
    /**
     * Returns the drawing context on the canvas.
     *
     * @param {string} contextId - The context identifier.
     * @param {CanvasRenderingContext2DSettings} [contextAttributes] - The context attributes.
     *
     * @returns {CanvasRenderingContext2D | null} - The drawing context on the canvas, or null if the context identifier is not supported
     * or current canvas is not valid.
     */
    getContext(contextId: '2d', contextAttributes?: CanvasRenderingContext2DSettings): CanvasRenderingContext2D | null;
    /**
     * Retrieves the image data from the canvas and returns it.
     *
     * @returns {ImageData | null} - The image data from the canvas if the canvas and context are available and the operation was successful, null otherwise.
     */
    getImageData(): ImageData | null;
    /**
     * Updates the base64 representation of the current canvas image.
     * @param {number} jpegQuality - The quality level of the JPEG image. Defaults to 1.0.
     */
    updateBase64Image(jpegQuality?: number): void;
    /**
     * Converts the current canvas element to a base64 string.
     *
     * @param {number} jpegQuality - The quality level of the JPEG image. Defaults to 1.0.
     * @param {boolean} includeDataURLPrefix - If true, returns the complete base64 string. If false, returns the base64 string without the data URL prefix.
     *
     * @returns {string | null} - The base64 string if the operation was successful, null otherwise.
     */
    getBase64Image(jpegQuality?: number, includeDataURLPrefix?: boolean): string | null;
    /**
     * Sets the base64 representation of the current canvas image.
     * @param {string} base64Image - The base64 string of the image.
     */
    setBase64Image(base64Image: string): void;
    /**
     * Updates the Blob representation of the current canvas image.
     * @param {number} jpegQuality - The quality level of the JPEG image. Defaults to 1.0.
     */
    updateBlob(jpegQuality?: number, includeDataURLPrefix?: boolean): void;
    /**
     * Converts a base64 string to a Blob and creates a URL for it.
     *
     * @param {string} base64 - The base64 string.
     *
     * @returns {Object} - An object containing the Blob object and its URL, or null if an error occurred.
     */
    static base64ToBlob(base64: string): {
        blob: Blob;
        url: string;
    } | null;
    /**
     * Retrieves the Blob data and its URL from the current canvas.
     *
     * If the Blob data is not already available, it creates a Blob object from the current canvas and creates a URL for it.
     *
     * @param {number} jpegQuality=1.0 - The quality level of the JPEG image.
     * @param {boolean} includeDataURLPrefix=false - Whether to include the data URL prefix in the Blob data.
     *
     * @returns {Object | null} - An object containing the Blob object and its URL, or null if an error occurred.
     */
    getBlobData(jpegQuality?: number, includeDataURLPrefix?: boolean): {
        blob: Blob;
        url: string;
    } | null;
    /**
     * Sets the Blob data of the current canvas image.
     * @param {Object} blobData - An object containing the Blob object and its URL.
     */
    setBlobData(blobData: {
        blob: Blob;
        url: string;
    }): Promise<void>;
    /**
     * Returns a resized canvas according to video element size.
     * @param {number} vieoElementWidth - The width of the video element.
     * @param {number} videoElementHeight - The height of the video element.
     * @returns {IncodeCanvas | null} - The resized canvas or null if there's no context.
     */
    getResizedCanvas(vieoElementWidth: number, videoElementHeight: number): IncodeCanvas | null;
}
