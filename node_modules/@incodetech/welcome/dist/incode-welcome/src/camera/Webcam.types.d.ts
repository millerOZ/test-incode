import type { Dispatch, MutableRefObject, SetStateAction } from 'react';
import { IncodeCanvas } from './IncodeCanvas';
export type WebcamProps = {
    onPlay?: () => void;
    videoSource?: 'user' | 'environment';
    isSelfie?: boolean;
    className?: string;
    permission?: boolean;
    setPermission?: (permission: boolean) => void;
    permissionMessage?: string;
    permissionBackgroundColor?: string;
    onLog?: (log: any) => void;
    stream?: MediaStream;
    onError: (error: any) => void;
    token?: string;
    error?: boolean;
    interviewId?: string;
    onStreamReady?: (stream: MediaStream) => void;
    showCustomCameraPermissionScreen?: boolean;
    screenshotFormat?: string;
    assistedOnboarding?: boolean;
    deviceId?: string;
    onRestartOnboarding?: () => void;
    showDoublePermissionsRequest?: boolean;
    publishAudio?: boolean;
    fullHeight?: boolean;
    isVideoSelfie?: boolean;
    documentType?: string;
    type?: 'BackId' | 'FrontId' | 'Passport' | 'fiscalQR' | 'linkTicket' | 'login' | 'loginDesktop' | 'additionalId' | 'selfie' | 'desktopSelfie';
    isRecordingEnabled?: boolean;
    isKiosk?: boolean;
    flipVerticallyImage?: boolean;
    isIdv2?: boolean;
};
export type UpdateCanvas = (options: {
    width?: number;
    height?: number;
    useOriginalDimensions?: boolean;
}) => boolean;
export type GetCanvas = (options?: {
    width?: number;
    height?: number;
    useOriginalDimensions?: boolean;
}) => IncodeCanvas | null;
export type WebcamRef = {
    getCanvas: GetCanvas;
    video: HTMLVideoElement;
    stream: MediaStream;
    setIsLoadingCamera: Dispatch<SetStateAction<boolean>>;
    streamUnlocked: MutableRefObject<boolean>;
};
