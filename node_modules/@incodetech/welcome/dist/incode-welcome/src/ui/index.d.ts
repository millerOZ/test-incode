import type { ComponentProps, ElementType, FC } from 'react';
import { type DefaultTheme } from 'styled-components';
import type { Theme } from './theme';
type FontSize = 'xs' | 'sm' | 'base' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl' | '6xl';
export type SpacingValue = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 10 | 12 | 16 | 20;
type FlexDirection = 'row' | 'column' | 'row-reverse' | 'column-reverse';
type JustifyContent = 'flex-start' | 'flex-end' | 'center' | 'space-between' | 'space-around' | 'space-evenly';
type AlignItems = 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch';
type FlexWrap = 'nowrap' | 'wrap' | 'wrap-reverse';
export declare const fontSizes: Record<FontSize, string>;
export declare const spacingScale: Record<SpacingValue, string>;
export declare const breakpoints: {
    xs: string;
    sm: string;
    md: string;
    lg: string;
};
type TextOwnProps<E extends ElementType = ElementType> = {
    as?: E;
    size?: FontSize;
    weight?: string | number;
    align?: 'left' | 'center' | 'right' | 'justify';
    color?: string | ((props: {
        theme: DefaultTheme & Theme;
    }) => string);
    lineHeight?: string | number;
    letterSpacing?: string | number;
    fontFamily?: string;
};
export type TextProps<E extends ElementType> = TextOwnProps<E> & Omit<ComponentProps<E>, keyof TextOwnProps>;
export declare const Text: <E extends ElementType<any> = "p">({ as, size, weight, align, ...restProps }: TextProps<E>) => import("react/jsx-runtime").JSX.Element;
type BoxOwnProps<E extends ElementType = ElementType> = {
    as?: E;
    m?: SpacingValue | string;
    mx?: SpacingValue | string;
    my?: SpacingValue | string;
    mt?: SpacingValue | string;
    mr?: SpacingValue | string;
    mb?: SpacingValue | string;
    ml?: SpacingValue | string;
    p?: SpacingValue | string;
    px?: SpacingValue | string;
    py?: SpacingValue | string;
    pt?: SpacingValue | string;
    pr?: SpacingValue | string;
    pb?: SpacingValue | string;
    pl?: SpacingValue | string;
    xsM?: SpacingValue | string;
    xsMx?: SpacingValue | string;
    xsMy?: SpacingValue | string;
    xsMt?: SpacingValue | string;
    xsMr?: SpacingValue | string;
    xsMb?: SpacingValue | string;
    xsMl?: SpacingValue | string;
    smM?: SpacingValue | string;
    smMx?: SpacingValue | string;
    smMy?: SpacingValue | string;
    smMt?: SpacingValue | string;
    smMr?: SpacingValue | string;
    smMb?: SpacingValue | string;
    smMl?: SpacingValue | string;
    mdM?: SpacingValue | string;
    mdMx?: SpacingValue | string;
    mdMy?: SpacingValue | string;
    mdMt?: SpacingValue | string;
    mdMr?: SpacingValue | string;
    mdMb?: SpacingValue | string;
    mdMl?: SpacingValue | string;
    xsP?: SpacingValue | string;
    xsPx?: SpacingValue | string;
    xsPy?: SpacingValue | string;
    xsPt?: SpacingValue | string;
    xsPr?: SpacingValue | string;
    xsPb?: SpacingValue | string;
    xsPl?: SpacingValue | string;
    smP?: SpacingValue | string;
    smPx?: SpacingValue | string;
    smPy?: SpacingValue | string;
    smPt?: SpacingValue | string;
    smPr?: SpacingValue | string;
    smPb?: SpacingValue | string;
    smPl?: SpacingValue | string;
    mdP?: SpacingValue | string;
    mdPx?: SpacingValue | string;
    mdPy?: SpacingValue | string;
    mdPt?: SpacingValue | string;
    mdPr?: SpacingValue | string;
    mdPb?: SpacingValue | string;
    mdPl?: SpacingValue | string;
    hFull?: boolean;
    wFull?: boolean;
    w?: SpacingValue | string;
    h?: SpacingValue | string;
    maxH?: SpacingValue | string;
    maxW?: SpacingValue | string;
    minH?: SpacingValue | string;
    minW?: SpacingValue | string;
    xsW?: SpacingValue | string;
    smW?: SpacingValue | string;
    mdW?: SpacingValue | string;
    xsH?: SpacingValue | string;
    smH?: SpacingValue | string;
    mdH?: SpacingValue | string;
    xsMaxW?: SpacingValue | string;
    smMaxW?: SpacingValue | string;
    mdMaxW?: SpacingValue | string;
    xsMaxH?: SpacingValue | string;
    smMaxH?: SpacingValue | string;
    mdMaxH?: SpacingValue | string;
    bg?: string | ((props: {
        theme: DefaultTheme & Theme;
    }) => string);
    borderRadius?: SpacingValue | string;
    overflow?: 'visible' | 'hidden' | 'scroll' | 'auto' | 'clip';
    position?: 'static' | 'relative' | 'absolute' | 'fixed' | 'sticky';
    bottom?: string | number;
    left?: string | number;
    right?: string | number;
    top?: string | number;
    inset?: string | number;
    boxShadow?: string;
    zIndex?: number;
    transition?: string;
    transform?: string;
    border?: string;
    borderTop?: string;
    borderRight?: string;
    borderBottom?: string;
    borderLeft?: string;
    borderWidth?: string | number;
    borderStyle?: 'solid' | 'dashed' | 'dotted' | 'none';
    borderColor?: string | ((props: {
        theme: DefaultTheme & Theme;
    }) => string);
    display?: string;
    objectFit?: 'fill' | 'contain' | 'cover' | 'none' | 'scale-down';
    objectPosition?: string;
    userSelect?: 'none' | 'text' | 'all';
    WebkitUserDrag?: 'none' | 'element';
    backgroundColor?: string;
    aspectRatio?: string | number;
    spin?: boolean;
};
type BoxProps<E extends ElementType> = BoxOwnProps<E> & Omit<ComponentProps<E>, keyof BoxOwnProps>;
export declare const Box: <E extends ElementType<any> = "div">(props: BoxProps<E>) => import("react/jsx-runtime").JSX.Element;
type FlexOwnProps = BoxOwnProps & {
    direction?: FlexDirection;
    justify?: JustifyContent;
    align?: AlignItems;
    wrap?: FlexWrap;
    gap?: SpacingValue;
    flex?: string | number;
};
type FlexProps<E extends ElementType> = FlexOwnProps & Omit<ComponentProps<E>, keyof FlexOwnProps>;
export declare const Flex: <E extends ElementType<any> = "div">(props: FlexProps<E>) => import("react/jsx-runtime").JSX.Element;
type FlexItemProps = {
    grow?: number;
    shrink?: number;
    basis?: string | number;
    flex?: string | number;
    alignSelf?: 'auto' | 'flex-start' | 'flex-end' | 'center' | 'baseline' | 'stretch';
    order?: number;
};
export declare const FlexItem: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, FlexItemProps>> & string;
export declare const FlexCenter: <E extends ElementType<any> = "div">(props: FlexProps<E>) => import("react/jsx-runtime").JSX.Element;
type SpacerProps = {
    size?: SpacingValue;
    axis?: 'vertical' | 'horizontal';
    xsSize?: SpacingValue;
    smSize?: SpacingValue;
    mdSize?: SpacingValue;
    lgSize?: SpacingValue;
};
export declare const Spacer: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components/dist/types").Substitute<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, SpacerProps>> & string;
export declare const colors: {
    primary: string;
    white: string;
    black: string;
    lightGray: string;
    gray: string;
    frameGray: string;
    red: string;
    surfaceSecondary900: string;
    green: string;
    darkGray: string;
    blue: string;
    borderGray: string;
};
type ImageOwnProps = {
    objectFit?: 'fill' | 'contain' | 'cover' | 'none' | 'scale-down';
    objectPosition?: string;
    loading?: 'lazy' | 'eager';
    draggable?: boolean;
};
type ImageProps = ImageOwnProps & Omit<BoxProps<'img'>, keyof ImageOwnProps>;
export declare const Image: FC<ImageProps>;
export declare const LinkButton: import("styled-components/dist/types").IStyledComponentBase<"web", import("styled-components").FastOmit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, never>> & string;
export { default as ErrorIcon } from './ErrorIcon';
export { default as Modal } from './Modal';
