import { WasmPipelineType } from './wasmPipelineType';
import { IdCaptureModelType } from './IdCaptureModelType';
declare global {
    interface Window {
        wasmArrayBuffer: Uint8Array | null;
    }
}
interface Point {
    x: number;
    y: number;
}
interface Rect {
    x: number;
    y: number;
    width: number;
    height: number;
}
interface Face {
    rect: Rect;
    score: number;
    rightEye: Point;
    leftEye: Point;
    noseTip: Point;
    rightMouthCorner: Point;
    leftMouthCorner: Point;
    pitch: number;
    yaw: number;
    roll: number;
}
interface FaceDetectionPipelineResult {
    faces: Face[] & {
        size: () => number;
    };
    networkInferenceTime: number;
}
interface IdCapturePipelineResult {
    cls: number;
    blur: number;
    glare: number;
    quad: Point[];
    barQuad: Point[];
    side: string;
    size: number;
    idType: string;
    networkInferenceTime: number;
}
declare class MlWasmJSApi {
    private versionsFile;
    private modelsBuffers;
    private inputImageBuffer;
    private wasmModule;
    private pipelineApiUtilities;
    private utilityApi;
    private idCaptureWasmApi;
    private faceDetectionWasmApi;
    private imageWidth_;
    private imageHeight_;
    private pipelines_;
    private isInitialized_;
    private inspectorOpened_;
    private Module;
    private static instance;
    /**
     * Initiallization method, use it when the application starts
     * TODO: this method can return the list of promises to be awaited together with other initialization code
     * @param {string} webLibPath - The path to the webassembly binary
     * @param {string} webLibPathSimd - The path to the SIMD version webassembly binary
     * @param {boolean} useSimd - Indicates whether SIMD optimizations should be used
     * @param {string} versionsFile - The path to the file containing versioning information
     * @param {Map.<WasmPipelineType, Array<string>>} pipelines - pipelines for initialization and corresponding models paths
     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether SIMD is enabled once the initialization is complete.
     * @throws {Error} Throws an error if the initialization fails.
     */
    initialize(webLibPath: string, webLibPathSimd: string, glueCodePath: string, useSimd: boolean, versionsFile: string, pipelines: Map<WasmPipelineType, Array<string>>): Promise<boolean>;
    static getInstance(): MlWasmJSApi;
    loadModule: (glueCodePath: any) => Promise<void>;
    /**
     * Returns initialization status
     * @returns
     */
    isInitialized(): boolean;
    /**
     * Allocate shared memory for image buffers (RGBA format)
     * Use it every time when the frame dimentions changes
     * @param {number} imageWidth - image width
     * @param {number} imageHeight - image height
     */
    allocateImageBuffers(imageWidth: number | null, imageHeight: number | null): Promise<void>;
    handleDetectionCallAndUpdateState(type: WasmPipelineType): Promise<void>;
    encryptImage(image: string): string;
    isVirtualCamera(label: string | null): boolean;
    estimatePerformance(): string;
    analyzeFrame(image: ImageData): Promise<void>;
    /**
     * Free allocated memory
     */
    freeResources(): Promise<void>;
    /**
     * Clear pipeline state
     */
    resetPipeline(type: WasmPipelineType): void;
    /**
     * Clear all pipelines states
     */
    resetAllPipelines(): void;
    /**
     * Clear all states, not related to ml pipelines
     */
    resetOther(): void;
    /**
     * Full reset
     */
    reset(): void;
    /**
     * Process one frame using one of the pipelines
     * @param {ImageData} image - input image
     * @param {WasmPipelineType} type - pipeline type
     * @returns
     */
    process(image: ImageData, type: WasmPipelineType): Promise<any>;
    runIdCapture(image: ImageData): Promise<IdCapturePipelineResult>;
    runSelfieCapture(image: ImageData): Promise<FaceDetectionPipelineResult>;
    setFacePositionConstraints(type: WasmPipelineType, minX: Number, minY: Number, maxX: Number, maxY: Number): Promise<void>;
    setFaceDetectionThresholds(type: WasmPipelineType, brightnessThreshold: Number, blurrinessThreshold: Number, tiltRotationAngleThreshold: Number, minMagicCropSize: Number, autocaptureInterval: Number, minFaceQualityScore: Number): Promise<void>;
    setFaceAttributesThresholds(type: WasmPipelineType, headwearThreshold: Number, lensesThreshold: Number, closedEyesThreshold: Number, maskThreshold: Number): Promise<void>;
    setFaceAttributesEnabled(type: WasmPipelineType, isLensesCheckEnabled: boolean, isMaskCheckEnabled: boolean, isClosedEyesCheckEnabled: boolean, isHeadWearCheckEnabled: boolean): Promise<void>;
    setFaceDetectionMode(type: WasmPipelineType, isVideoSelfie: boolean): Promise<void>;
    setFaceDetectionCallbacks(type: WasmPipelineType, onFarAway: Function, onTooClose: Function, onTooManyFaces: Function, onNoFace: Function, onCapture: Function, onGetReady: Function, onGetReadyFinished: Function, onCenterFace: Function, onDark: Function, onBlur: Function, onFaceAngle: Function, onBestShot: Function, onLenses: Function, onMask: Function, onEyesClosed: Function, onHeadWear: Function, onSwitchToManualCapture: Function): Promise<void>;
    setIdCaptureThresholds(type: WasmPipelineType, blurThreshold: number, blurChangeThreshold: number, glareThreshold: number, clsThreshold: number, sideThreshold: number, iouThreshold: number, idDetectedTimeout: number, autocaptureTimeout: number, framesAggregationInterval: number): Promise<void>;
    setIdCaptureCallbacks(type: WasmPipelineType, onFarAway: Function, onDetectionStarted: Function, onMaskChange: Function, onBlur: Function, onGlare: Function, onCapturing: Function, onCapture: Function, onBestFrame: Function, onIDNotDetected: Function, onSwitchToManualCapture: Function, onIDTypeChange: Function, onIDSideChange: Function): Promise<void>;
    setIdCaptureGeometryParams(type: WasmPipelineType, areaDown: number, areaUp: number, areaIOSPassportUp: number, areaIOSPassportDown: number, widthIOSUp: number, widthIOSDown: number, widthDown: number, widthUp: number, windowOuterWidth: number, windowOuterHeight: number, windowInnerWidth: number, windowInnerHeight: number): Promise<void>;
    setIdCaptureConfigParams(type: WasmPipelineType, isFixedMask: boolean, isIPhone14OrHigher: boolean, idType: string, isBlurCheckEnabled: boolean, isGlareCheckEnabled: boolean, isIdFaceQualityCheckEnabled: boolean, isIouCheckEnabled: boolean): Promise<void>;
    setIdCaptureModelType(pipelineType: WasmPipelineType, modelType: IdCaptureModelType): void;
    getVersions(): Promise<any>;
    private loadWasm;
    loadModels(): Promise<void>;
    initializePipelines(): Promise<void>;
    setProductionMode(productionMode: Boolean): Promise<void>;
    getPipelineState(): string;
    getCurrentPipeline(): WasmPipelineType;
    setSdkVersion(sdkVersion: string): void;
    setSdkPlatform(sdkPlatform: string): void;
    setDeviceInfo(deviceInfo: object, overrideExisting?: boolean): void;
    setBrowserInfo(browserInfo: object, overrideExisting?: boolean): void;
    setCameraInfo(cameraInfo: object, overrideExisting?: boolean): void;
    setZc(zc: string): void;
    setMotionStatus(motionStatus: string): void;
    setMetadataField(key: string, value: string): void;
    setInspectorOpened(inspectorOpened: boolean): void;
    setBackgroundMode(backgroundMode: boolean): void;
    getCheck(): string;
    getMetadata(): string;
    updateSettings(settings: object): void;
    updateParams(isIosMobile: boolean): Promise<void>;
    private pipelineTypeToWasmEnum;
    private pipelineTypeFromWasmEnum;
    private IdCaptureModelTypeToWasmEnum;
    private IdCaptureModelTypeFromWasmEnum;
    private checkWasmInitialization;
    private wasmCallWrapper;
}
declare const _default: MlWasmJSApi;
export default _default;
