import type { Flow } from '../../../../../types/src';
import { AbstractFlowManager } from '../../../FlowManager/AbstractFlowManager';
import type { BaseFlowState } from '../../../FlowManager/BaseFlowState';
export type FaceV1FlowStep = 'tutorial' | 'capture' | 'success' | 'error';
export type FaceV1SuccessData = {
    transactionId?: string;
    [key: string]: any;
};
export type FaceV1ErrorDetail = {
    message: string;
    code?: string;
    name?: string;
    stack?: string;
    [key: string]: any;
};
export type FaceV1FlowConcreteState = BaseFlowState<FaceV1FlowStep, FaceV1SuccessData, FaceV1ErrorDetail> & {
    isRecordingEnabled: boolean;
    shouldShowPreview: boolean;
    shouldShowAssistedOnboarding: boolean;
    shouldShowTutorial: boolean;
    isSecondId: boolean;
};
export declare class FaceV1FlowManager extends AbstractFlowManager<FaceV1FlowStep, Flow, FaceV1SuccessData, FaceV1ErrorDetail> {
    private additionalState;
    constructor();
    protected fetchFlowConfiguration(token: string): Promise<Flow>;
    protected determineInitialStep(flowConfig: Flow): FaceV1FlowStep;
    protected getMaxAttemptsFromFlow(flowConfig: Flow): number;
    protected formatError(error: unknown): FaceV1ErrorDetail;
    protected determineStepOnErrorDuringInit(_error: unknown): FaceV1FlowStep | null;
    goToCapture(): void;
    completeFlow(data: FaceV1SuccessData): void;
    incrementAttempts(): void;
    resetAttempts(): void;
    saveCaptureResponse(data: FaceV1SuccessData): void;
    getFlowConfig(): Flow | null;
    completeWithError(error: FaceV1ErrorDetail): void;
    reset(): void;
    getState(): FaceV1FlowConcreteState;
}
export declare const faceV1FlowManager: FaceV1FlowManager;
