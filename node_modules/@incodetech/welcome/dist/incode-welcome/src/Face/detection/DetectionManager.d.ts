import type { IncodeCanvas } from '../../camera/IncodeCanvas';
import type { FaceCoordinates } from '../../detection/detectFace';
export type DetectionState = 'idle' | 'detecting' | 'noFace' | 'tooManyFaces' | 'tooClose' | 'tooFar' | 'blur' | 'dark' | 'faceAngle' | 'headWear' | 'lenses' | 'eyesClosed' | 'faceMask' | 'centerFace' | 'manualCapture' | 'success' | 'error' | 'capturing' | 'getReady' | 'getReadyFinished';
export type BorderState = 'idle' | 'loading' | 'capturing' | 'success' | 'error';
export type DetectionManagerState = {
    detectionState: DetectionState;
    borderState: BorderState;
    isProcessingLocked: boolean;
};
type DetectionConfig<T = any, E = Error> = {
    onCapture: (canvas: IncodeCanvas, faceCoordinates: FaceCoordinates) => Promise<T>;
    onFinish?: (result: T) => void;
    onError?: (error: E) => void;
};
export declare class DetectionManager {
    private faceDetection;
    private state;
    private subscribers;
    private config;
    private getCanvas;
    private cameraZoom;
    private borderState;
    constructor();
    private setState;
    private notifySubscribers;
    getState(): DetectionManagerState;
    subscribe(callback: (state: DetectionManagerState) => void): () => void;
    unsubscribe(callback: (state: DetectionManagerState) => void): void;
    setGetCanvas(getCanvas: () => IncodeCanvas | undefined): void;
    switchToManualCapture(): void;
    private detectVirtualCamera;
    private restoreZoom;
    initialize(config: DetectionConfig): Promise<void>;
    processFrame: () => Promise<void>;
    startDetection(): void;
    stopDetection(): void;
}
export declare const detectionManager: DetectionManager;
export {};
