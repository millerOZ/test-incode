import type { Flow } from '../../../../types/src';
import { AbstractFlowManager } from '../../FlowManager/AbstractFlowManager';
import type { BaseFlowState } from '../../FlowManager/BaseFlowState';
export type FaceFlowStep = 'tutorial' | 'permissions' | 'capture' | 'success' | 'error';
export type SuccessData = {
    /** Age of the user */
    age: number;
    /** Confidence score between 0 and 1, where 0 means no match and 1 means perfect match */
    confidence: number;
    /** Indicates if the user has closed eyes */
    hasClosedEyes: boolean;
    /** Indicates if the user has a face mask */
    hasFaceMask: boolean;
    /** Indicates if the user has a head cover */
    hasHeadCover: boolean;
    /** Indicates if the user has lenses */
    hasLenses: boolean;
    /** Indicates if the user is bright */
    isBright: boolean;
    /** Session status */
    sessionStatus: string;
};
export type FaceSuccessData = SuccessData & {
    /** Indicates if the face matched with the ID */
    faceMatch: boolean;
    /** Confidence score between 0 and 1, where 0 means no match and 1 means perfect match */
    confidence: number;
    /** Indicates if the user exists in our database */
    existingUser: boolean;
};
export type FaceErrorDetail = {
    message: string;
    code?: string;
    [key: string]: any;
};
export type FaceFlowConcreteState = BaseFlowState<FaceFlowStep, FaceSuccessData, FaceErrorDetail>;
export declare class FaceFlowManager extends AbstractFlowManager<FaceFlowStep, Flow, FaceSuccessData, FaceErrorDetail> {
    constructor();
    protected fetchFlowConfiguration(token: string): Promise<Flow>;
    protected determineInitialStep(flowConfig: Flow): FaceFlowStep;
    protected getMaxAttemptsFromFlow(flowConfig: Flow): number;
    getFlowConfig(): Flow | null;
    protected formatError(error: unknown): FaceErrorDetail;
    protected determineStepOnErrorDuringInit(_error: unknown): FaceFlowStep | null;
    goToCapture(): void;
    goToPermissions(): void;
    completeFlow(data: SuccessData): Promise<void>;
    reset(): void;
    completeWithError(error: FaceErrorDetail): void;
}
export declare const faceFlowManager: FaceFlowManager;
