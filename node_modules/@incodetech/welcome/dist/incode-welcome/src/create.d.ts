import type { AxiosRequestConfig } from 'axios';
import { renderCaptureFace } from './Face/renderCaptureFace';
import { renderCaptureId } from './ID/renderCaptureId';
import renderPhone from './Phone/renderPhone';
import renderInstantVerify from './RememberMe/renderInstantVerify';
import renderUniversalIdentity from './RememberMe/renderUniversalIdentity';
import addAddressStatement from './addAddressStatement';
import addConferenceEvent from './addConferenceEvent';
import addContract from './addContract';
import addCreditCardBack from './addCreditCardBack';
import addCreditCardFront from './addCreditCardFront';
import addCurp from './addCurp';
import addCurpv2 from './addCurpv2';
import addDocument from './addDocument';
import addEvent from './addEvent';
import addFrontSecondId from './addFrontSecondId';
import addGeolocation from './addGeolocation';
import addInitials from './addInitials';
import addName from './addName';
import addPhone from './addPhone';
import addPhoneInstantVerify from './addPhoneInstantVerify';
import addQrCodeText from './addQrCodeText';
import addSignature from './addSignature';
import addSpeech from './addSpeech';
import addToQueue from './addToQueue';
import approve from './approve';
import identify from './auth/identify';
import identifyInstantVerify from './auth/identifyInstantVerify';
import oneToOneIdentify from './auth/oneToOneIdentify';
import renderLogin from './auth/renderLogin';
import renderLoginDesktop from './auth/renderLoginDesktop';
import renderLoginIncodeID from './auth/renderLoginIncodeID';
import sendMfa from './auth/sendMfa';
import capture from './capture';
import compareBackID from './compareBackId';
import compareBackOCR from './compareBackOCR';
import compareGovValidationOTP from './compareGovValidationOTP';
import compareID from './compareID';
import compareInstantVerifyOTP from './compareInstantVerifyOTP';
import compareOCR from './compareOCR';
import connectToQueue from './connectToQueue';
import renderBiometricConsent from './consents/biometricConsent/renderBiometricConsent';
import renderCombinedConsent from './consents/combinedConsent/renderCombinedConsent';
import renderMlConsent from './consents/renderMlConsent';
import renderUserConsent from './consents/renderUserConsent';
import createNewSession from './createNewSession';
import createSession from './createSession';
import renderEnterCurp from './curp/renderEnterCurp';
import renderAdvancedElectronicSignature from './electronicSignatures/renderAdvancedElectronicSignature';
import renderCertificateIssuance from './electronicSignatures/renderCertificateIssuance';
import renderQualifiedElectronicSignature from './electronicSignatures/renderQualifiedElectronicSignature';
import fetchAssets from './fetchAssets';
import fetchModels from './fetchModels';
import fetchModules from './fetchModules';
import fetchProcessingStatus from './fetchProcessingStatus';
import renderFiscalQr from './fiscalQr/renderFiscalQr';
import { renderForms } from './forms/renderForms';
import generateAESDocumentUploadUrl from './generateAESDocumentUploadUrl';
import generateOTP from './generateOTP';
import getAdvancedElectronicSignatureUnsignedDocs from './getAdvancedElectronicSignatureUnsignedDocs';
import getConnectionDetails from './getConnectionDetails';
import getFingerPrint from './getFingerPrint';
import getForms from './getForms';
import getImages from './getImages';
import getImagesV2 from './getImagesV2';
import getInstantVerifyMissingModules from './getInstantVerifyMissingModules';
import getInterviewerName from './getInterviewerName';
import { getLocationSuggestions } from './getLocationSuggestions';
import getMedicalOcrData from './getMedicalOcrData';
import getModuleConfig from './getModuleConfig';
import getOnboardingStatus from './getOnboardingStatus';
import getOpenTokTest from './getOpenTokTest';
import { getOtpStatus } from './getOtpStatus';
import getPhone from './getPhone';
import getQueueIndex from './getQueueIndex';
import getRandomQuestions from './getRandomQuestions';
import getScore from './getScore';
import getSecondIdImages from './getSecondIDImages';
import getSecondIdImagesV2 from './getSecondIDImagesV2';
import { getWatchlist } from './getWatchlist';
import { useModuleEvents, useScreenEvents } from './hooks/useModuleEvents';
import instantVerifyShareIdentity from './instantVerifyShareIdentity';
import instantVerifyUpdate from './instantVerifyUpdate';
import lastNameMatch from './lastNameMatch';
import lastNameMatchByCustomer from './lastNameMatchByCustomer';
import renderManualIdUpload from './manualIdUpload/renderManualIdUpload';
import mock from './mock';
import ocrData from './ocrData';
import ocrDataSecondId from './ocrDataSecondId';
import compareOTP from './otp/compareOTP';
import sendOTPSMS from './otp/sendOTPSMS';
import postFingerPrint from './postFingerprint';
import processAddressStatement from './processAddressStatement';
import processAdvancedElectronicSignatureDocs from './processAdvancedElectronicSignatureDocs';
import processCreditCard from './processCreditCard';
import processCrossDocumentData from './processCrossDocumentData';
import processFace from './processFace';
import processFaceSecondId from './processFaceSecondId';
import processGlobalWatchlist from './processGlobalWatchlist';
import processGovernmentValidation from './processGovernmentValidation';
import processId from './processId';
import processImss from './processImss';
import processSecondId from './processSecondId';
import processWatchlist from './processWatchlist';
import publishKeys from './publishKeys';
import renderQrScanner from './qrScanner/renderQrScanner';
import { renderVideoSelfie } from './recorder/renderVideoSelfie';
import removeFromQueue from './removeFromQueue';
import renderBackTutorial from './renderBackTutorial';
import renderCamera from './renderCamera';
import renderCapture from './renderCapture';
import renderConference from './renderConference';
import renderDocumentSelector from './renderDocumentSelector';
import renderDocumentTutorial from './renderDocumentTutorial';
import renderEmail from './renderEmail';
import renderFaceMatch from './renderFaceMatch';
import renderFrontTutorial from './renderFrontTutorial';
import renderOTP from './renderOTP';
import renderPassportTutorial from './renderPassportTutorial';
import renderQr from './renderQr';
import renderRedirectToMobile from './renderRedirectToMobile';
import renderSelfieTutorial from './renderSelfieTutorial';
import { renderWatchList } from './renderWatchList';
import renderRetrySteps from './retries/renderRetrySteps';
import sendEkyb from './sendEkyb';
import sendEmail from './sendEmail';
import sendFingerprint from './sendFingerprint';
import sendGeolocation from './sendGeolocation';
import setSessionStatus from './setSessionStatus';
import attachSignatureOnAnnotation from './signature/attachSignatureOnAnnotation';
import getSignedContractsLinks from './signature/getSignedContractsLinks';
import renderSignature from './signature/renderSignature';
import submitAnswer from './submitAnswer';
import update from './update';
import updateSecondId from './updateSecondId';
import updateSession from './updateSession';
import verifyOTP from './verifyOTP';
import { addWatchListResults, initWatchList } from './watchList';
declare function create({ apiKey, apiURL, lang, encrypt, translations, theme: _theme, clientId, 
/** @deprecated This parameter is no longer used. The apiKey is now received from backend responses */
tokboxApiKey, darkMode, hostingApp, unsafeMode, customHeaders, fingerprintApiKey, redirectFromUnsupportedBrowsers, skipInitialize, useSha256, forceProductionMode, }: {
    apiKey?: string;
    apiURL: string;
    lang?: string;
    translations?: any;
    opencvURL?: string;
    facefinderURL?: string;
    theme?: any;
    clientId?: string;
    encrypt?: boolean;
    /** @deprecated This parameter is no longer used. The apiKey is now received from backend responses */
    tokboxApiKey?: string;
    darkMode?: boolean;
    hostingApp?: string;
    unsafeMode?: boolean;
    customHeaders?: AxiosRequestConfig['headers'];
    fingerprintApiKey?: string;
    redirectFromUnsupportedBrowsers?: boolean;
    skipInitialize?: boolean;
    useSha256?: boolean;
    forceProductionMode?: boolean;
}): {
    createSession: typeof createSession;
    createNewSession: typeof createNewSession;
    updateSession: typeof updateSession;
    publishKeys: typeof publishKeys;
    capture: typeof capture;
    frontType: string;
    backType: string;
    selfieType: string;
    ocrData: typeof ocrData;
    getScore: typeof getScore;
    addToQueue: typeof addToQueue;
    getQueueIndex: typeof getQueueIndex;
    addDocument: typeof addDocument;
    state: {
        token: any;
    };
    processId: typeof processId;
    processFace: typeof processFace;
    getInterviewerName: typeof getInterviewerName;
    getOpenTokTest: typeof getOpenTokTest;
    addAddressStatement: typeof addAddressStatement;
    processAddressStatement: typeof processAddressStatement;
    processWatchlist: typeof processWatchlist;
    processGovernmentValidation: typeof processGovernmentValidation;
    addPhone: typeof addPhone;
    addPhoneInstantVerify: typeof addPhoneInstantVerify;
    postFingerPrint: typeof postFingerPrint;
    getImages: typeof getImages;
    getConnectionDetails: typeof getConnectionDetails;
    fetchModules: typeof fetchModules;
    fetchModels: typeof fetchModels;
    update: typeof update;
    renderCamera: typeof renderCamera;
    renderConference: typeof renderConference;
    renderManualIdUpload: typeof renderManualIdUpload;
    renderFrontTutorial: typeof renderFrontTutorial;
    renderBackTutorial: typeof renderBackTutorial;
    renderSelfieTutorial: typeof renderSelfieTutorial;
    renderPassportTutorial: typeof renderPassportTutorial;
    renderDocumentTutorial: typeof renderDocumentTutorial;
    encrypt: boolean;
    sendFingerprint: typeof sendFingerprint;
    getFingerPrint: typeof getFingerPrint;
    verifyOTP: typeof verifyOTP;
    generateOTP: typeof generateOTP;
    connectToQueue: typeof connectToQueue;
    addConferenceEvent: typeof addConferenceEvent;
    removeFromQueue: typeof removeFromQueue;
    approve: typeof approve;
    addGeolocation: typeof addGeolocation;
    warmup: () => Promise<void>;
    renderSignature: typeof renderSignature;
    renderAdvancedElectronicSignature: typeof renderAdvancedElectronicSignature;
    addSignature: typeof addSignature;
    getMedicalOcrData: typeof getMedicalOcrData;
    renderVideoSelfie: typeof renderVideoSelfie;
    renderOTP: typeof renderOTP;
    addEvent: typeof addEvent;
    getRandomQuestions: typeof getRandomQuestions;
    sendGeolocation: typeof sendGeolocation;
    fetchProcessingStatus: typeof fetchProcessingStatus;
    theme: import('../../types/src').IncodeTheme;
    /** @deprecated This property is no longer used. The apiKey is now received from backend responses */
    tokboxApiKey: string;
    mock: typeof mock;
    setSessionStatus: typeof setSessionStatus;
    renderCapture: typeof renderCapture;
    addSpeech: typeof addSpeech;
    fetchAssets: typeof fetchAssets;
    setTheme: <T extends import('../../types/src').IncodeTheme>(customTheme: T) => import('../../types/src').IncodeTheme;
    sendOTPSMS: typeof sendOTPSMS;
    compareOTP: typeof compareOTP;
    getFinishStatus: (flowId: string, { token }: {
        token: string;
    }) => Promise<{
        redirectionUrl: string;
        action: "none" | "approved" | "rejected";
    }>;
    renderLogin: typeof renderLogin;
    renderLoginIncodeID: typeof renderLoginIncodeID;
    renderLoginDesktop: typeof renderLoginDesktop;
    identify: typeof identify;
    identifyInstantVerify: typeof identifyInstantVerify;
    OneToOneIdentify: typeof oneToOneIdentify;
    addCurp: typeof addCurp;
    addCurpv2: typeof addCurpv2;
    renderEnterCurp: typeof renderEnterCurp;
    addInitials: typeof addInitials;
    attachSignatureOnAnnotation: typeof attachSignatureOnAnnotation;
    getSignedContractsLinks: typeof getSignedContractsLinks;
    renderRedirectToMobile: typeof renderRedirectToMobile;
    renderQr: typeof renderQr;
    getOnboardingStatus: typeof getOnboardingStatus;
    addWatchListResults: typeof addWatchListResults;
    initWatchList: typeof initWatchList;
    addName: typeof addName;
    addEmail: ({ token, email }: {
        token: string;
        email: string;
    }) => Promise<{
        success: boolean;
    }>;
    addCustomFields: ({ token, fields }: {
        token: string;
        fields: {
            [key: string]: string;
        };
    }) => Promise<{
        success: boolean;
    }>;
    addBarcode: ({ token, rawBarcode }: {
        token: string;
        rawBarcode: string;
    }) => Promise<import("axios").AxiosResponse<{
        success: boolean;
    }, any>>;
    renderRetrySteps: typeof renderRetrySteps;
    isDesktop: () => boolean;
    addFrontSecondId: typeof addFrontSecondId;
    processSecondId: typeof processSecondId;
    ocrDataSecondId: typeof ocrDataSecondId;
    processFaceSecondId: typeof processFaceSecondId;
    getCustomFields: ({ token }: {
        token: string;
    }) => Promise<{
        customFields: {
            [key: string]: string | number | boolean;
        };
    }>;
    getImagesV2: typeof getImagesV2;
    renderFaceMatch: typeof renderFaceMatch;
    sendRedirectSMS: ({ token, smsType, params }: {
        token: string;
        smsType: "DESKTOP_ONBOARDING";
        params: string[];
    }) => Promise<{
        success: true;
    }>;
    sendMfa: typeof sendMfa;
    getInterviewData: (token: string) => Promise<any>;
    lastNameMatch: typeof lastNameMatch;
    lastNameMatchByCustomer: typeof lastNameMatchByCustomer;
    sendEmail: typeof sendEmail;
    addCreditCardFront: typeof addCreditCardFront;
    addCreditCardBack: typeof addCreditCardBack;
    processCreditCard: typeof processCreditCard;
    i18n: import("i18next").i18n;
    compareOCR: typeof compareOCR;
    compareID: typeof compareID;
    compareBackID: typeof compareBackID;
    compareBackOCR: typeof compareBackOCR;
    getStartInfo: (token: {
        token: string;
    }) => Promise<{
        phonePrefix: string;
        country: string;
        ipIsoCode: string;
    }>;
    addMLConsent: ({ token, mlConsentChecked, id }: {
        token: string;
        mlConsentChecked: boolean;
        id: string;
    }) => Promise<{
        success: boolean;
    }>;
    renderMlConsent: typeof renderMlConsent;
    sendEkyb: typeof sendEkyb;
    addQrCodeText: typeof addQrCodeText;
    renderQrScanner: typeof renderQrScanner;
    addContract: typeof addContract;
    processCrossDocumentData: typeof processCrossDocumentData;
    processAntiFraud: ({ token, interviewId }: {
        token: string;
        interviewId: string;
    }) => Promise<import("axios").AxiosResponse<{
        success: boolean;
    }, any>>;
    darkMode: boolean;
    getSecondIdImages: typeof getSecondIdImages;
    getSecondIdImagesV2: typeof getSecondIdImagesV2;
    enableDeviceRiskModule: ({ token, isSandbox, interviewId, deviceRiskClientId, }: {
        token: string;
        interviewId: string;
        deviceRiskClientId: string;
        isSandbox?: boolean;
    }) => Promise<any>;
    getDeviceRiskModuleConfiguration: (token: string) => Promise<import("./risk/services").DeviceRiskResponse>;
    collectDeviceRiskResults: (token: string) => Promise<void>;
    addBankInfo: ({ token, bankData, }: {
        token: string;
        bankData: import("./addBankInfo").BankData;
    }) => Promise<any>;
    getBelvoWidgetToken: ({ token }: {
        token: string;
    }) => Promise<{
        token: string;
    }>;
    getWatchlist: typeof getWatchlist;
    useModuleEvents: typeof useModuleEvents;
    useScreenEvents: typeof useScreenEvents;
    eventModuleNames: {
        readonly selfie: "SELFIE";
        readonly mlConsent: "ML_CONSENT";
        readonly combinedConsent: "COMBINED_CONSENT";
        readonly curpValidation: "CURP_VALIDATION";
        readonly faceMatch: "FACE_MATCH";
        readonly generateQR: "QR";
        readonly videoSelfie: "VIDEO_ONBOARDING";
        readonly passport: "ID";
        readonly front: "ID";
        readonly back: "ID";
        readonly document: "DOCUMENT_CAPTURE";
        readonly creditCard: "CREDIT_CARD_FRONT";
        readonly creditCardBack: "CREDIT_CARD_BACK";
        readonly conference: "CONFERENCE";
        readonly otp: "OTP";
        readonly signature: "SIGNATURE";
        readonly ekyc: "EXTERNAL_VERIFICATION";
        readonly globalWatchList: "GLOBAL_WATCHLIST";
        readonly customWatchList: "CUSTOM_WATCHLIST";
        readonly email: "EMAIL";
        readonly phone: "PHONE";
        readonly instantVerifyEmail: "INSTANT_VERIFY_EMAIL";
        readonly instantVerifyConsent: "INSTANT_VERIFY_CONSENT";
        readonly forms: "FORMS";
    };
    eventScreenNames: {
        readonly faceMatch: "FACE_MATCH";
        readonly faceCaptureTutorial: "SELFIE_CAPTURE_TUTORIAL";
        readonly faceCaptureCamera: "SELFIE_CAMERA_CAPTURE";
        readonly faceCaptureError: "SELFIE_ATTEMPT_FAILED";
        readonly faceCaptureSuccess: "SELFIE_UPLOAD_SUCCEEDED";
        readonly faceCaptureUpload: "SELFIE_UPLOAD_PROGRESS";
        readonly mlConsent: "MACHINE_LEARNING_CONSENT";
        readonly combinedConsent: "COMBINED_CONSENT";
        readonly curpEnter: "ENTER_CURP";
        readonly curpValidate: "VALIDATE_CURP";
        readonly curpGenerate: "GENERATE_CURP";
        readonly curpValidation: "CURP_VALIDATION_PROGRESS";
        readonly curpValidationFailed: "CURP_VALIDATION_FAILED";
        readonly curpValidationSuccess: "CURP_VALIDATION_SUCCEEDED";
        readonly qrTutorial: "QR_TUTORIAL";
        readonly qrScan: "QR_SCAN";
        readonly smsOtp: "OTP";
        readonly simpleOTP: "OTP";
        readonly signatureInput: "SIGNATURE_INPUT";
        readonly frontTutorial: "FRONT_ID_CAPTURE_TUTORIAL";
        readonly frontCameraCapture: "FRONT_ID_CAMERA_CAPTURE";
        readonly frontHelp: "FRONT_ID_HELP";
        readonly frontReviewPhoto: "FRONT_ID_REVIEW_PHOTO";
        readonly frontUploadProgress: "FRONT_ID_UPLOAD_PROGRESS";
        readonly frontAttemptFailed: "FRONT_ID_ATTEMPT_FAILED";
        readonly frontUploadSuccess: "FRONT_ID_UPLOAD_SUCCEEDED";
        readonly backTutorial: "BACK_ID_CAPTURE_TUTORIAL";
        readonly backCameraCapture: "BACK_ID_CAMERA_CAPTURE";
        readonly backReviewPhoto: "BACK_ID_REVIEW_PHOTO";
        readonly backUploadProgress: "BACK_ID_UPLOAD_PROGRESS";
        readonly backAttemptFailed: "BACK_ID_ATTEMPT_FAILED";
        readonly backUploadSuccess: "BACK_ID_UPLOAD_SUCCEEDED";
        readonly backHelp: "BACK_ID_HELP";
        readonly passportTutorial: "TUTORIAL_PASSPORT";
        readonly documentTutorial: "DOCUMENT_CAPTURE_TUTORIAL";
        readonly documentCameraCapture: "DOCUMENT_CAMERA_CAPTURE";
        readonly documentHelp: "DOCUMENT_HELP";
        readonly documentReviewPhoto: "DOCUMENT_REVIEW_PHOTO";
        readonly documentUploadProgress: "DOCUMENT_UPLOAD_IN_PROGRESS";
        readonly documentAttemptFailed: "DOCUMENT_ATTEMPT_FAILED";
        readonly documentUploadSuccess: "DOCUMENT_UPLOAD_SUCCEEDED";
        readonly conferenceWait: "CONFERENCE_WAIT";
        readonly conferenceVideoChat: "CONFERENCE_VIDEO_CHAT";
        readonly conferenceMessageChat: "CONFERENCE_MESSAGE_CHAT";
        readonly videoSelfieTutorial: "VIDEO_SELFIE_TUTORIAL";
        readonly videoSelfie: "VIDEO_SELFIE";
        readonly videoSelfieFaceCapture: "VIDEO_SELFIE_FACE_CAPTURE";
        readonly videoSelfieFaceUploadProgress: "VIDEO_SELFIE_FACE_UPLOAD_PROGRESS";
        readonly videoSelfieFaceAttemptFailed: "VIDEO_SELFIE_FACE_ATTEMPT_FAILED";
        readonly videoSelfieFaceUploadSucceeded: "VIDEO_SELFIE_FACE_UPLOAD_SUCCEEDED";
        readonly videoSelfieFrontIdCapture: "VIDEO_SELFIE_FRONT_ID_CAPTURE";
        readonly videoSelfieFrontIdUploadProgress: "VIDEO_SELFIE_FRONT_ID_UPLOAD_PROGRESS";
        readonly videoSelfieFrontIdAttemptFailed: "VIDEO_SELFIE_FRONT_ID_ATTEMPT_FAILED";
        readonly videoSelfieFrontIdUploadSucceeded: "VIDEO_SELFIE_FRONT_ID_UPLOAD_SUCCEEDED";
        readonly videoSelfieBackIdCapture: "VIDEO_SELFIE_BACK_ID_CAPTURE";
        readonly videoSelfieBackIdUploadProgress: "VIDEO_SELFIE_BACK_ID_UPLOAD_PROGRESS";
        readonly videoSelfieBackIdAttemptFailed: "VIDEO_SELFIE_BACK_ID_ATTEMPT_FAILED";
        readonly videoSelfieBackIdUploadSucceeded: "VIDEO_SELFIE_BACK_ID_UPLOAD_SUCCEEDED";
        readonly videoSelfieDocumentCapture: "VIDEO_SELFIE_DOCUMENT_CAPTURE";
        readonly videoSelfieVoiceQuestion: "VIDEO_SELFIE_VOICE_QUESTION";
        readonly videoSelfieVoiceFinalQuestion: "VIDEO_SELFIE_VOICE_FINAL_QUESTION";
        readonly videoSelfieVideoUpload: "VIDEO SELFIE VIDEO UPLOAD";
        readonly ekycInput: "EKYC_INPUT";
        readonly ekycProgress: "EKYC_PROGRESS";
        readonly ekycSucceeded: "EKYC_SUCCEEDED";
        readonly ekycFailed: "EKYC_FAILED";
        readonly forms: "FORMS";
        readonly globalWatchListInput: "GLOBAL_WATCHLIST_INPUT";
        readonly globalWatchListProgress: "GLOBAL_WATCHLIST_PROGRESS";
        readonly globalWatchListSuccess: "GLOBAL_WATCHLIST_SUCCEEDED";
        readonly globalWatchListFailed: "GLOBAL_WATCHLIST_FAILED";
        readonly customWatchListInput: "CUSTOM_WATCHLIST_INPUT";
        readonly customWatchListProgress: "CUSTOM_WATCHLIST_PROGRESS";
        readonly customWatchListSuccess: "CUSTOM_WATCHLIST_SUCCEEDED";
        readonly customWatchListFailed: "CUSTOM_WATCHLIST_FAILED";
        readonly emailInput: "EMAIL_INPUT";
        readonly phoneInput: "PHONE_INPUT";
        readonly instantVerify: "INSTANT_VERIFY";
    };
    addScreenEvent: ({ module, token, screen, payload, shouldOpen, }: {
        module: string;
        payload?: {
            [key: string]: unknown;
        };
        token: string;
        screen?: string;
        code?: string;
    } & {
        shouldOpen: boolean;
    }) => void;
    updateSecondId: typeof updateSecondId;
    createRedirectUrl: ({ session }: {
        session: import('../../types/src').LooseSession;
    }) => Promise<any>;
    compareGovValidationOTP: typeof compareGovValidationOTP;
    compareInstantVerifyOTP: typeof compareInstantVerifyOTP;
    getAdvancedElectronicSignatureUnsignedDocs: typeof getAdvancedElectronicSignatureUnsignedDocs;
    processAdvancedElectronicSignatureDocs: typeof processAdvancedElectronicSignatureDocs;
    renderUniversalIdentity: typeof renderUniversalIdentity;
    renderInstantVerify: typeof renderInstantVerify;
    getInstantVerifyMissingModules: typeof getInstantVerifyMissingModules;
    renderWatchList: typeof renderWatchList;
    renderEmail: typeof renderEmail;
    renderPhone: typeof renderPhone;
    instantVerifyShareIdentity: typeof instantVerifyShareIdentity;
    renderForms: typeof renderForms;
    submitAnswer: typeof submitAnswer;
    getForms: typeof getForms;
    generateAESDocumentUploadUrl: typeof generateAESDocumentUploadUrl;
    getModuleConfig: typeof getModuleConfig;
    instantVerifyUpdate: typeof instantVerifyUpdate;
    renderDocumentSelector: typeof renderDocumentSelector;
    renderBiometricConsent: typeof renderBiometricConsent;
    processImss: typeof processImss;
    renderUserConsent: typeof renderUserConsent;
    processGlobalWatchlist: typeof processGlobalWatchlist;
    getRedirectUrl: (flowId: string, { token }: {
        token: string;
    }) => Promise<{
        redirectionUrl: string;
    }>;
    renderCombinedConsent: typeof renderCombinedConsent;
    setUxType: (type: "desktop" | "mobile") => void;
    getOtpStatus: typeof getOtpStatus;
    getLocationSuggestions: typeof getLocationSuggestions;
    initialize: () => Promise<void>;
    renderFiscalQr: typeof renderFiscalQr;
    renderQualifiedElectronicSignature: typeof renderQualifiedElectronicSignature;
    renderCertificateIssuance: typeof renderCertificateIssuance;
    renderCaptureId: typeof renderCaptureId;
    getPhone: typeof getPhone;
    renderCaptureFace: typeof renderCaptureFace;
};
export default create;
