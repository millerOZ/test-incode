import type { LooseSession } from '../../types/src';
export type RenderCameraProps = {
    onSuccess?: (response: unknown) => void;
    onError?: (response: unknown) => void;
    onLog?: (logEntry: {
        type: string;
        payload: {
            [key: string]: any;
        };
    }) => void;
    numberOfTries?: number;
    permissionMessage?: string;
    permissionBackgroundColor?: string;
    token?: LooseSession;
    timeout?: number;
    sendBase64?: boolean;
    documentType?: string;
    showPreview?: boolean;
    stream?: unknown;
    nativeCamera?: boolean;
    hideRetake?: boolean;
    showTutorial?: boolean;
    showPaperDLTutorial?: boolean;
    onlyCapture?: boolean;
    scanPdf417?: boolean;
    videoTutorialSrc?: string;
    showCustomCameraPermissionScreen?: boolean;
    isSecondId?: boolean;
    fullScreen?: boolean;
    assistedOnboarding?: boolean;
    isRecordingEnabled?: boolean;
    onRestartOnboarding?: () => void;
    showDoublePermissionsRequest?: boolean;
    onlyAllowCapture?: boolean;
    disableFullScreen?: boolean;
    onStreamReady?: (stream: MediaStream) => void;
    showAutoCaptureIDOverlay?: boolean;
    showManualCaptureIDOverlay?: boolean;
    skipProcessFace?: boolean;
    defaultHorizontalMask?: boolean;
    isFixedMask?: boolean;
    blurrinessStrictMode?: boolean;
    isKiosk?: boolean;
    ageAssurance?: boolean;
    publishAudio?: boolean;
    zoomLevel?: number;
    idDetectedTimeout?: number;
    flipVerticallyImage?: boolean;
    disableZoomCheck?: boolean;
    hatCheckEnabled?: boolean;
    lensesCheckEnabled?: boolean;
    maskCheckEnabled?: boolean;
    eyesClosedCheckEnabled?: boolean;
    isDeepsightEnabled?: boolean;
    tutorialText?: {
        [key: `step${number}`]: {
            title: string;
            subtitle: string;
        };
    };
};
export declare function App(props: any): import("react/jsx-runtime").JSX.Element;
declare function renderCamera(type: string, element: Element, { onSuccess, onError, numberOfTries, onLog, permissionMessage, permissionBackgroundColor, token, timeout, sendBase64, documentType, showPreview, stream, nativeCamera, hideRetake, showTutorial, showPaperDLTutorial, onlyCapture, scanPdf417, videoTutorialSrc, showCustomCameraPermissionScreen, isSecondId, fullScreen, assistedOnboarding, isRecordingEnabled, onRestartOnboarding, showDoublePermissionsRequest, onlyAllowCapture, disableFullScreen, onStreamReady, showAutoCaptureIDOverlay, showManualCaptureIDOverlay, skipProcessFace, defaultHorizontalMask, isFixedMask, blurrinessStrictMode, isKiosk, ageAssurance, publishAudio, zoomLevel, idDetectedTimeout, flipVerticallyImage, disableZoomCheck, hatCheckEnabled, lensesCheckEnabled, maskCheckEnabled, eyesClosedCheckEnabled, isDeepsightEnabled, tutorialText, }: RenderCameraProps): {
    close: (...props: unknown[]) => void;
};
export default renderCamera;
