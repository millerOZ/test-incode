import type { Flow, LooseSession } from '../../../types/src';
type EventCallback<T> = (data: T) => void;
type EventKey = string;
export type OnboardingError = 'NoMoreTries' | 'SessionError' | 'UploadError';
export declare abstract class BaseCaptureCore {
    session: LooseSession | null;
    attempts: number;
    eventListeners: Map<EventKey, Set<EventCallback<any>>>;
    flow: Flow | null;
    idCaptureResponse: Record<string, unknown> | null;
    updateSession(session: LooseSession): void;
    updateFlow(flow: Flow): void;
    updateIdCaptureResponse(response: Record<string, unknown>): void;
    getFlow(): Flow | null;
    getSession(): LooseSession | null;
    getIdCaptureResponse(): Record<string, unknown> | null;
    getAttempts(): number;
    getMaxAttempts(): number;
    canRetry(): boolean;
    incrementAttempts(): void;
    resetAttempts(): void;
    reset(): void;
    on<K extends EventKey>(event: K, callback: EventCallback<any>): () => void;
    off<K extends EventKey>(event: K, callback: EventCallback<any>): void;
    emit<K extends EventKey>(event: K, data: any): void;
    emitError(error: OnboardingError): void;
}
export {};
