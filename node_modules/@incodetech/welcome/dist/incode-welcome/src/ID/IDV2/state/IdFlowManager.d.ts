import type { Flow } from '../../../../../types/src';
import { AbstractFlowManager } from '../../../FlowManager/AbstractFlowManager';
import type { IdErrorDetail, IdFlowStep, IdSuccessData, OnboardingError } from './idFlowTypes';
export declare class IdFlowManager extends AbstractFlowManager<IdFlowStep, Flow, IdSuccessData, IdErrorDetail> {
    constructor();
    protected fetchFlowConfiguration(token: string): Promise<Flow>;
    protected determineInitialStep(flowConfig: Flow): IdFlowStep;
    protected getMaxAttemptsFromFlow(flowConfig: Flow): number;
    protected formatError(error: unknown): IdErrorDetail;
    protected determineStepOnErrorDuringInit(_error: unknown): IdFlowStep | null;
    goToChooser(): void;
    goToIdStep(): void;
    goToPassportStep(): void;
    goToPermissions(): void;
    completeFlow(data: IdSuccessData): void;
    failFlow(errorData: OnboardingError | IdErrorDetail | Error | string): void;
    reportGeneralError(message: string, code?: string): void;
    getShouldShowTutorial(): boolean;
    getIsRecordingEnabled(): boolean;
    getDeviceIdleTimeout(): number | undefined;
    getIdCaptureTimeout(): number | undefined;
    incrementAttempts(): void;
    resetAttempts(): void;
    saveCaptureResponse(data: IdSuccessData): void;
}
export declare const idFlowManager: IdFlowManager;
