import { type UploadFrontIdResponse } from '../../../capture';
type IdType = 'front' | 'back';
export type ErrorType = 'UPLOAD_ERROR' | 'CLASSIFICATION_FAILED' | 'LOW_SHARPNESS' | 'GLARE_DETECTED' | 'WRONG_DOCUMENT_SIDE' | 'ID_TYPE_UNACCEPTABLE' | 'READABILITY_ISSUE';
export type CaptureIdResponse = UploadFrontIdResponse & {
    croppedIDFace?: string;
    croppedFrontID?: string;
    croppedBackID?: string;
    originalImage?: string;
    frontIdImage?: string;
    backIdImage?: string;
};
type UploadIdParams = {
    image: string;
    type: IdType;
    sendBase64?: boolean;
    isSecondId?: boolean;
    onlyFront?: boolean;
    glare?: number;
    sharpness?: number;
    shouldSkipGlareBack?: boolean;
    shouldSkipGlareFront?: boolean;
    captureType?: string;
    ageAssurance?: boolean;
    onProgress?: (progress: number) => void;
};
export declare class CaptureIdError extends Error {
    errorKey: string;
    messageDescription?: string;
    constructor(errorKey: string, message: string, messageDescription?: string);
}
export declare const createCaptureIdApi: (token: string) => {
    uploadId(params: UploadIdParams): Promise<CaptureIdResponse>;
    reset(): void;
};
export default createCaptureIdApi;
