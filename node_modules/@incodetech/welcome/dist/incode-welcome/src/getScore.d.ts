import type { LooseSession } from '../../types/src';
type ScoreStatus = 'OK' | 'WARN' | 'FAIL';
type Score = {
    status: ScoreStatus;
    value: string;
    key: string;
};
type Overall = {
    status: ScoreStatus;
    value: string;
};
type RetryInfo = {
    failedAttemptsCounter?: {
        failedScreenIdLivenessAttempts: number;
    };
    stepsToRetry: ('frontId' | 'backId')[];
};
type ScoreResponse = {
    idValidation: {
        photoSecurityAndQuality: Score[];
        idSpecific: Score[];
        overall: Overall;
    };
    liveness: {
        livenessScore: Overall;
        digitalAttack: {
            status: ScoreStatus;
        };
        evasionAttack: {
            status: ScoreStatus;
        };
        overall: Overall;
    };
    faceRecognition: {
        existingUser: boolean;
        existingInterviewId?: string;
        maskCheck: Overall;
        lensesCheck: {
            status: ScoreStatus;
        };
        faceBrightness: {
            status: ScoreStatus;
        };
        nameMatch: {
            status: ScoreStatus;
        };
        overall: Overall;
    };
    idOcrConfidence: {
        overallConfidence: Overall;
    };
    retryInfo: RetryInfo;
    overall: Overall;
    reasonMsg: string;
};
export default function getScore({ token }: LooseSession): Promise<ScoreResponse>;
export {};
