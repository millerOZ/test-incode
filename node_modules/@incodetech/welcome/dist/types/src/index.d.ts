export type OnboardingStatus = 'ONBOARDING_FINISHED' | 'UNKNOWN';
export type Session = {
    token: string;
    clientId: string;
    curpValidationRetries: number;
    endScreenText: string | null;
    endScreenTitle: string | null;
    env: string;
    existingSession: boolean;
    idCaptureRetries: number;
    idCaptureTimeout: number;
    interviewCode: string;
    interviewId: string;
    selfieCaptureRetries: number;
    selfieCaptureTimeout: number;
    flowType: string;
    regulationType: string;
    showMandatoryConsent: boolean;
    processImss: boolean;
    onboardingLinkExpirationMinutes: number;
    hatCheckEnabled?: boolean;
    lensesCheckEnabled?: boolean;
    maskCheckEnabled?: boolean;
    eyesClosedCheckEnabled?: boolean;
};
export type LooseSession = {
    token: string;
    [key: string]: unknown;
};
export interface NameBean {
    fullName?: string;
    firstName?: string;
    middleName?: string;
    givenName?: string;
    nameSuffix?: string;
    paternalLastName?: string;
    maternalLastName?: string;
    lastNameMrz?: string;
}
export interface AddressBean {
    street?: string;
    colony?: string;
    postalCode?: string;
    city?: string;
    state?: string;
    label?: string;
    confidentGeolocation?: boolean;
}
export interface AddressStatements {
    _id: string;
    dateType: string;
    addressStatementTimestamp: number;
}
export interface OcrData {
    name: NameBean;
    givenName?: string;
    firstName?: string;
    middleName?: string;
    nameSuffix?: string;
    mothersSurname?: string;
    fathersSurname?: string;
    nickName?: string;
    address?: string;
    street?: string;
    colony?: string;
    postalCode?: string;
    city?: string;
    state?: string;
    stateCode?: string;
    countryCode?: string;
    addressFields?: AddressBean;
    fullAddress?: boolean;
    invalidAddress?: boolean;
    checkedAddress?: string;
    checkedAddressBean?: AddressBean;
    exteriorNumber?: string;
    interiorNumber?: string;
    addressFromStatement?: string;
    addressFieldsFromStatement?: AddressBean;
    invalidAddressFromStatement?: boolean;
    addressStatementEmissionDate?: number;
    documentType?: string;
    addressStatementTimestamps?: AddressStatements[];
    poaName?: string;
    typeOfId?: string;
    documentFrontSubtype?: string;
    documentBackSubtype?: string;
    birthDate?: number | string;
    gender?: string;
    claveDeElector?: string;
    curp?: string;
    numeroEmisionCredencial?: string;
    cic?: string;
    ocr?: string;
    documentNumber?: string;
    personalNumber?: string;
    refNumber?: string;
    nue?: string;
    externalId?: string;
    issuedAt?: string;
    expireAt?: string;
    expirationDate?: number;
    issueDate?: number;
    registrationDate?: number;
    issuingCountry?: string;
    issuingState?: string;
    birthPlace?: string;
    issuingAuthority?: string;
    height?: string;
    weight?: string;
    eyeColor?: string;
    hairColor?: string;
    bloodType?: string;
    maritalStatus?: string;
    nationality?: string;
    nationalityMrz?: string;
    classes?: string;
    cond?: string;
    mentions?: string;
    restrictions?: string;
    mrz1?: string;
    mrz2?: string;
    mrz3?: string;
    fullNameMrz?: string;
    documentNumberCheckDigit?: string;
    dateOfBirthCheckDigit?: string;
    expirationDateCheckDigit?: string;
    fathersName?: string;
    mothersName?: string;
    federalRevenueNumber?: string;
    originDocumentId?: string;
    driversLicenseCategory?: string;
    controlNumber?: string;
    renach?: string;
    ocrReliabilityConfidence?: number;
    ocrDataConfidence?: any;
}
export type Consent = {
    consentType: 'PRIVACY' | 'ML';
    title: string;
    text: string;
    id: string;
    description: string;
};
declare const regulationTypes: {
    readonly US: "US";
    readonly Worldwide: "Worldwide";
    readonly Other: "Other";
    readonly US_Illinois: "US_Illinois";
    readonly US_Texas: "US_Texas";
    readonly US_California: "US_California";
    readonly US_Washington: "US_Washington";
};
export type RegulationTypes = (typeof regulationTypes)[keyof typeof regulationTypes];
export interface IncodeTheme {
    main: string;
    buttonBorderRadius: string;
    buttonColor: string;
    modal: {};
    mainButton: {};
    secondaryButton: {};
}
export interface IncodeOptions {
    darkMode?: boolean;
    hostingApp?: string;
    unsafeMode?: boolean;
    redirectFromUnsupportedBrowsers?: boolean;
    recorderProvider?: 'openTok' | 'openVidu';
    useSha256?: boolean;
}
export type FLErrorStatuses = 4004 | 4015;
export type FLError<TError = FLErrorStatuses> = {
    status: TError;
    message: string;
};
export type FaceLoginError<TError = FLErrorStatuses> = FLError<TError> | string;
export type CustomFields = {
    name: string;
    alias: string;
    type: string;
};
export type CustomFieldsConfig = {
    title: string;
    customFields: CustomFields[];
};
export type Flow = {
    id: string;
    idCaptureAttempts: number;
    idCaptureTimeout: number;
    selfieCaptureAttempts: number;
    selfieCaptureTimeout: number;
    checkAuthorization: boolean;
    checkDocumentScan: boolean;
    checkIdScan: boolean;
    checkLiveness: boolean;
    checkTutorials: boolean;
    checkVoiceConsent: boolean;
    videoSelfieAsSelfie: boolean;
    hasFaceDeduplication?: boolean;
    redirectDekstopToMobile?: boolean;
    enableMultipleOnboardings?: boolean;
    compareIdEnabled: boolean;
    compareOcrEnabled: boolean;
    compareBackIdEnabled: boolean;
    compareBackOcrEnabled: boolean;
    customFieldsConfig: CustomFieldsConfig;
    isStadiumFlow: boolean;
    isKidsFlow: boolean;
    isAdultFlow: boolean;
    addContinueToDesktop: boolean;
    redirectOriginOnly: boolean;
    modules: string[];
    disableSkipPoa: boolean;
    poaTitle?: string;
    poaText?: string;
    documentTitle?: string;
    documentText?: string;
    onlyFront?: boolean;
    onlyBack?: boolean;
    questionsCount: number;
    displayOnboardingResultOnDesktop?: boolean;
    disableLaunchScreen: boolean;
    disableSmsOption: boolean;
    optinEnabled: boolean;
    manualUploadIdCapture: boolean;
    showDocumentChooserScreen?: boolean;
    optinCompanyName: string;
    phoneConfigurationConfig: {
        otpVerification: boolean;
        otpExpirationInMinutes: number;
    };
    signatureConfigurationConfig: {
        title: string;
        subTitle: string;
    };
    emailConfigurationConfig: {
        otpVerification: boolean;
        otpExpirationInMinutes: number;
    };
    disableMandatoryConsentCheck: boolean;
    geolocationConfigurationConfig: {
        allowUserToSkipGeolocation: false;
    };
    combinedConsentConfigurationConfig?: {
        combinedConsents: string;
    };
    useOpenVidu: boolean;
    mergeSessionRecordings: boolean;
    deviceIdleTimeout?: number;
    sardineRiskClientId?: string;
    ageAssurance?: boolean;
    isDeepsightEnabled?: boolean;
    selfieValidateFaceMask?: boolean;
    selfieLensesValidation?: boolean;
    selfieValidateHat?: boolean;
    selfieValidateClosedEyes?: boolean;
    selfieValidateBrightness?: boolean;
    deepsightLiveness?: string;
    mandatoryConsentCheck?: boolean;
    fetchAdditionalPage?: boolean;
    companyName?: string;
};
export {};
